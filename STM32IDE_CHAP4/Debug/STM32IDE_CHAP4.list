
STM32IDE_CHAP4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000375c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800388c  0800388c  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800388c  0800388c  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800388c  0800388c  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800388c  0800388c  0001388c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08003894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200000c4  08003958  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003958  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b913  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214d  00000000  00000000  0002ba00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002e638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dee  00000000  00000000  0002efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2f1  00000000  00000000  00046dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086017  00000000  00000000  000540c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da0de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c38  00000000  00000000  000da134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003850 	.word	0x08003850

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	08003850 	.word	0x08003850

0800014c <isButton1Pressed>:
int button2_flag = 0;

int TimerForKeyPressButton3 = 200;
int button3_flag = 0;

int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000e0 	.word	0x200000e0

08000170 <subKeyProcessButton1>:

void subKeyProcessButton1(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <subKeyProcessButton1+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	200000e0 	.word	0x200000e0

08000188 <getKeyInputButton1>:

void getKeyInputButton1() {
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	KeyReg0Button1 = KeyReg1Button1;
 800018c:	4b21      	ldr	r3, [pc, #132]	; (8000214 <getKeyInputButton1+0x8c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a21      	ldr	r2, [pc, #132]	; (8000218 <getKeyInputButton1+0x90>)
 8000192:	6013      	str	r3, [r2, #0]
	KeyReg1Button1 = KeyReg2Button1;
 8000194:	4b21      	ldr	r3, [pc, #132]	; (800021c <getKeyInputButton1+0x94>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a1e      	ldr	r2, [pc, #120]	; (8000214 <getKeyInputButton1+0x8c>)
 800019a:	6013      	str	r3, [r2, #0]
	KeyReg2Button1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	481f      	ldr	r0, [pc, #124]	; (8000220 <getKeyInputButton1+0x98>)
 80001a2:	f002 fa4f 	bl	8002644 <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b1c      	ldr	r3, [pc, #112]	; (800021c <getKeyInputButton1+0x94>)
 80001ac:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button1 == KeyReg1Button1) && (KeyReg1Button1 == KeyReg2Button1)) {
 80001ae:	4b1a      	ldr	r3, [pc, #104]	; (8000218 <getKeyInputButton1+0x90>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b18      	ldr	r3, [pc, #96]	; (8000214 <getKeyInputButton1+0x8c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d129      	bne.n	800020e <getKeyInputButton1+0x86>
 80001ba:	4b16      	ldr	r3, [pc, #88]	; (8000214 <getKeyInputButton1+0x8c>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b17      	ldr	r3, [pc, #92]	; (800021c <getKeyInputButton1+0x94>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d123      	bne.n	800020e <getKeyInputButton1+0x86>
		if (KeyReg3Button1 != KeyReg2Button1) {
 80001c6:	4b17      	ldr	r3, [pc, #92]	; (8000224 <getKeyInputButton1+0x9c>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <getKeyInputButton1+0x94>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d00d      	beq.n	80001ee <getKeyInputButton1+0x66>
			KeyReg3Button1 = KeyReg2Button1;
 80001d2:	4b12      	ldr	r3, [pc, #72]	; (800021c <getKeyInputButton1+0x94>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a13      	ldr	r2, [pc, #76]	; (8000224 <getKeyInputButton1+0x9c>)
 80001d8:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button1 == PRESSED_STATE) {
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <getKeyInputButton1+0x94>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d115      	bne.n	800020e <getKeyInputButton1+0x86>
				// TODO
				subKeyProcessButton1();
 80001e2:	f7ff ffc5 	bl	8000170 <subKeyProcessButton1>
				TimerForKeyPressButton1 = 200;
 80001e6:	4b10      	ldr	r3, [pc, #64]	; (8000228 <getKeyInputButton1+0xa0>)
 80001e8:	22c8      	movs	r2, #200	; 0xc8
 80001ea:	601a      	str	r2, [r3, #0]
					KeyReg3Button1 = NORMAL_STATE;
				}
			}
		}
	}
}
 80001ec:	e00f      	b.n	800020e <getKeyInputButton1+0x86>
			--TimerForKeyPressButton1;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <getKeyInputButton1+0xa0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <getKeyInputButton1+0xa0>)
 80001f6:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton1 == 0) {
 80001f8:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <getKeyInputButton1+0xa0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d106      	bne.n	800020e <getKeyInputButton1+0x86>
				if (KeyReg2Button1 == PRESSED_STATE) {
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <getKeyInputButton1+0x94>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d102      	bne.n	800020e <getKeyInputButton1+0x86>
					KeyReg3Button1 = NORMAL_STATE;
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <getKeyInputButton1+0x9c>)
 800020a:	2201      	movs	r2, #1
 800020c:	601a      	str	r2, [r3, #0]
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000004 	.word	0x20000004
 8000218:	20000000 	.word	0x20000000
 800021c:	20000008 	.word	0x20000008
 8000220:	40011000 	.word	0x40011000
 8000224:	2000000c 	.word	0x2000000c
 8000228:	20000030 	.word	0x20000030

0800022c <isButton2Pressed>:

int isButton2Pressed() {
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	if(button2_flag == 1) {
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <isButton2Pressed+0x20>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d104      	bne.n	8000242 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <isButton2Pressed+0x20>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
		return 1;
 800023e:	2301      	movs	r3, #1
 8000240:	e000      	b.n	8000244 <isButton2Pressed+0x18>
	}
	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	200000e4 	.word	0x200000e4

08000250 <subKeyProcessButton2>:

void subKeyProcessButton2(){
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <subKeyProcessButton2+0x14>)
 8000256:	2201      	movs	r2, #1
 8000258:	601a      	str	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	200000e4 	.word	0x200000e4

08000268 <getKeyInputButton2>:

void getKeyInputButton2() {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	KeyReg0Button2 = KeyReg1Button2;
 800026c:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <getKeyInputButton2+0x8c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a21      	ldr	r2, [pc, #132]	; (80002f8 <getKeyInputButton2+0x90>)
 8000272:	6013      	str	r3, [r2, #0]
	KeyReg1Button2 = KeyReg2Button2;
 8000274:	4b21      	ldr	r3, [pc, #132]	; (80002fc <getKeyInputButton2+0x94>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a1e      	ldr	r2, [pc, #120]	; (80002f4 <getKeyInputButton2+0x8c>)
 800027a:	6013      	str	r3, [r2, #0]
	KeyReg2Button2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800027c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000280:	481f      	ldr	r0, [pc, #124]	; (8000300 <getKeyInputButton2+0x98>)
 8000282:	f002 f9df 	bl	8002644 <HAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	461a      	mov	r2, r3
 800028a:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <getKeyInputButton2+0x94>)
 800028c:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button2 == KeyReg1Button2) && (KeyReg1Button2 == KeyReg2Button2)) {
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <getKeyInputButton2+0x90>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <getKeyInputButton2+0x8c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	429a      	cmp	r2, r3
 8000298:	d129      	bne.n	80002ee <getKeyInputButton2+0x86>
 800029a:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <getKeyInputButton2+0x8c>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <getKeyInputButton2+0x94>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d123      	bne.n	80002ee <getKeyInputButton2+0x86>
		if (KeyReg3Button2 != KeyReg2Button2) {
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <getKeyInputButton2+0x9c>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	4b14      	ldr	r3, [pc, #80]	; (80002fc <getKeyInputButton2+0x94>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d00d      	beq.n	80002ce <getKeyInputButton2+0x66>
			KeyReg3Button2 = KeyReg2Button2;
 80002b2:	4b12      	ldr	r3, [pc, #72]	; (80002fc <getKeyInputButton2+0x94>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <getKeyInputButton2+0x9c>)
 80002b8:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button2 == PRESSED_STATE) {
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <getKeyInputButton2+0x94>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d115      	bne.n	80002ee <getKeyInputButton2+0x86>
				// TODO
				subKeyProcessButton2();
 80002c2:	f7ff ffc5 	bl	8000250 <subKeyProcessButton2>
				TimerForKeyPressButton2 = 200;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <getKeyInputButton2+0xa0>)
 80002c8:	22c8      	movs	r2, #200	; 0xc8
 80002ca:	601a      	str	r2, [r3, #0]
					KeyReg3Button2 = NORMAL_STATE;
				}
			}
		}
	}
}
 80002cc:	e00f      	b.n	80002ee <getKeyInputButton2+0x86>
			--TimerForKeyPressButton2;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <getKeyInputButton2+0xa0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	4a0c      	ldr	r2, [pc, #48]	; (8000308 <getKeyInputButton2+0xa0>)
 80002d6:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton2 == 0) {
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <getKeyInputButton2+0xa0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d106      	bne.n	80002ee <getKeyInputButton2+0x86>
				if (KeyReg2Button2 == PRESSED_STATE) {
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <getKeyInputButton2+0x94>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d102      	bne.n	80002ee <getKeyInputButton2+0x86>
					KeyReg3Button2 = NORMAL_STATE;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <getKeyInputButton2+0x9c>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000014 	.word	0x20000014
 80002f8:	20000010 	.word	0x20000010
 80002fc:	20000018 	.word	0x20000018
 8000300:	40011000 	.word	0x40011000
 8000304:	2000001c 	.word	0x2000001c
 8000308:	20000034 	.word	0x20000034

0800030c <isButton3Pressed>:

int isButton3Pressed() {
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	if(button3_flag == 1) {
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <isButton3Pressed+0x20>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d104      	bne.n	8000322 <isButton3Pressed+0x16>
		button3_flag = 0;
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <isButton3Pressed+0x20>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
		return 1;
 800031e:	2301      	movs	r3, #1
 8000320:	e000      	b.n	8000324 <isButton3Pressed+0x18>
	}
	return 0;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	200000e8 	.word	0x200000e8

08000330 <subKeyProcessButton3>:

void subKeyProcessButton3(){
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <subKeyProcessButton3+0x14>)
 8000336:	2201      	movs	r2, #1
 8000338:	601a      	str	r2, [r3, #0]
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200000e8 	.word	0x200000e8

08000348 <getKeyInputButton3>:

void getKeyInputButton3() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	KeyReg0Button3 = KeyReg1Button3;
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <getKeyInputButton3+0x8c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a21      	ldr	r2, [pc, #132]	; (80003d8 <getKeyInputButton3+0x90>)
 8000352:	6013      	str	r3, [r2, #0]
	KeyReg1Button3 = KeyReg2Button3;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <getKeyInputButton3+0x94>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <getKeyInputButton3+0x8c>)
 800035a:	6013      	str	r3, [r2, #0]
	KeyReg2Button3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800035c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000360:	481f      	ldr	r0, [pc, #124]	; (80003e0 <getKeyInputButton3+0x98>)
 8000362:	f002 f96f 	bl	8002644 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	461a      	mov	r2, r3
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <getKeyInputButton3+0x94>)
 800036c:	601a      	str	r2, [r3, #0]

	if ((KeyReg0Button3 == KeyReg1Button3) && (KeyReg1Button3 == KeyReg2Button3)) {
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <getKeyInputButton3+0x90>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <getKeyInputButton3+0x8c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	429a      	cmp	r2, r3
 8000378:	d129      	bne.n	80003ce <getKeyInputButton3+0x86>
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <getKeyInputButton3+0x8c>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <getKeyInputButton3+0x94>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	429a      	cmp	r2, r3
 8000384:	d123      	bne.n	80003ce <getKeyInputButton3+0x86>
		if (KeyReg3Button3 != KeyReg2Button3) {
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <getKeyInputButton3+0x9c>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <getKeyInputButton3+0x94>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	429a      	cmp	r2, r3
 8000390:	d00d      	beq.n	80003ae <getKeyInputButton3+0x66>
			KeyReg3Button3 = KeyReg2Button3;
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <getKeyInputButton3+0x94>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <getKeyInputButton3+0x9c>)
 8000398:	6013      	str	r3, [r2, #0]
			if (KeyReg2Button3 == PRESSED_STATE) {
 800039a:	4b10      	ldr	r3, [pc, #64]	; (80003dc <getKeyInputButton3+0x94>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d115      	bne.n	80003ce <getKeyInputButton3+0x86>
				// TODO
				subKeyProcessButton3();
 80003a2:	f7ff ffc5 	bl	8000330 <subKeyProcessButton3>
				TimerForKeyPressButton3 = 200;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003a8:	22c8      	movs	r2, #200	; 0xc8
 80003aa:	601a      	str	r2, [r3, #0]
					KeyReg3Button3 = NORMAL_STATE;
				}
			}
		}
	}
}
 80003ac:	e00f      	b.n	80003ce <getKeyInputButton3+0x86>
			--TimerForKeyPressButton3;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003b6:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPressButton3 == 0) {
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <getKeyInputButton3+0xa0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d106      	bne.n	80003ce <getKeyInputButton3+0x86>
				if (KeyReg2Button3 == PRESSED_STATE) {
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <getKeyInputButton3+0x94>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <getKeyInputButton3+0x86>
					KeyReg3Button3 = NORMAL_STATE;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <getKeyInputButton3+0x9c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000024 	.word	0x20000024
 80003d8:	20000020 	.word	0x20000020
 80003dc:	20000028 	.word	0x20000028
 80003e0:	40011000 	.word	0x40011000
 80003e4:	2000002c 	.word	0x2000002c
 80003e8:	20000038 	.word	0x20000038

080003ec <fsm_automatic_run>:
 */
#include <fsm_automatic.h>

int color = INIT;

void fsm_automatic_run() {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af04      	add	r7, sp, #16
	switch (color) {
 80003f2:	4bba      	ldr	r3, [pc, #744]	; (80006dc <fsm_automatic_run+0x2f0>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	2b03      	cmp	r3, #3
 80003fa:	f200 81c4 	bhi.w	8000786 <fsm_automatic_run+0x39a>
 80003fe:	a201      	add	r2, pc, #4	; (adr r2, 8000404 <fsm_automatic_run+0x18>)
 8000400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000404:	08000415 	.word	0x08000415
 8000408:	08000457 	.word	0x08000457
 800040c:	080005c9 	.word	0x080005c9
 8000410:	0800067b 	.word	0x0800067b
		case INIT:
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, OFF, OFF);
 8000414:	2301      	movs	r3, #1
 8000416:	9302      	str	r3, [sp, #8]
 8000418:	2301      	movs	r3, #1
 800041a:	9301      	str	r3, [sp, #4]
 800041c:	2301      	movs	r3, #1
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2308      	movs	r3, #8
 8000422:	2204      	movs	r2, #4
 8000424:	2102      	movs	r1, #2
 8000426:	48ae      	ldr	r0, [pc, #696]	; (80006e0 <fsm_automatic_run+0x2f4>)
 8000428:	f001 f9ce 	bl	80017c8 <setColor>
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 800042c:	2301      	movs	r3, #1
 800042e:	9302      	str	r3, [sp, #8]
 8000430:	2301      	movs	r3, #1
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	2301      	movs	r3, #1
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2340      	movs	r3, #64	; 0x40
 800043a:	2220      	movs	r2, #32
 800043c:	2110      	movs	r1, #16
 800043e:	48a8      	ldr	r0, [pc, #672]	; (80006e0 <fsm_automatic_run+0x2f4>)
 8000440:	f001 f9c2 	bl	80017c8 <setColor>

			color = RED;
 8000444:	4ba5      	ldr	r3, [pc, #660]	; (80006dc <fsm_automatic_run+0x2f0>)
 8000446:	2202      	movs	r2, #2
 8000448:	601a      	str	r2, [r3, #0]
			setTimer1(red_duration);
 800044a:	4ba6      	ldr	r3, [pc, #664]	; (80006e4 <fsm_automatic_run+0x2f8>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f001 f83e 	bl	80014d0 <setTimer1>
			break;
 8000454:	e19e      	b.n	8000794 <fsm_automatic_run+0x3a8>
		case RED:
			display_time();
 8000456:	f000 fdeb 	bl	8001030 <display_time>
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, ON, OFF, OFF);
 800045a:	2301      	movs	r3, #1
 800045c:	9302      	str	r3, [sp, #8]
 800045e:	2301      	movs	r3, #1
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	2300      	movs	r3, #0
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2308      	movs	r3, #8
 8000468:	2204      	movs	r2, #4
 800046a:	2102      	movs	r1, #2
 800046c:	489c      	ldr	r0, [pc, #624]	; (80006e0 <fsm_automatic_run+0x2f4>)
 800046e:	f001 f9ab 	bl	80017c8 <setColor>
			if (isTimer1Paused(red_duration - green_duration)) {
 8000472:	4b9c      	ldr	r3, [pc, #624]	; (80006e4 <fsm_automatic_run+0x2f8>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b9c      	ldr	r3, [pc, #624]	; (80006e8 <fsm_automatic_run+0x2fc>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	1ad3      	subs	r3, r2, r3
 800047c:	4618      	mov	r0, r3
 800047e:	f001 f875 	bl	800156c <isTimer1Paused>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d03d      	beq.n	8000504 <fsm_automatic_run+0x118>
				if (idx == 0) {
 8000488:	4b98      	ldr	r3, [pc, #608]	; (80006ec <fsm_automatic_run+0x300>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d10e      	bne.n	80004ae <fsm_automatic_run+0xc2>
					display_num('B', 1, (timer1_counter + 100)/1000);
 8000490:	4b97      	ldr	r3, [pc, #604]	; (80006f0 <fsm_automatic_run+0x304>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	3364      	adds	r3, #100	; 0x64
 8000496:	4a97      	ldr	r2, [pc, #604]	; (80006f4 <fsm_automatic_run+0x308>)
 8000498:	fb82 1203 	smull	r1, r2, r2, r3
 800049c:	1192      	asrs	r2, r2, #6
 800049e:	17db      	asrs	r3, r3, #31
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	2101      	movs	r1, #1
 80004a6:	2042      	movs	r0, #66	; 0x42
 80004a8:	f000 fd5a 	bl	8000f60 <display_num>
 80004ac:	e01d      	b.n	80004ea <fsm_automatic_run+0xfe>
				}
				else if (idx == 1) {
 80004ae:	4b8f      	ldr	r3, [pc, #572]	; (80006ec <fsm_automatic_run+0x300>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d119      	bne.n	80004ea <fsm_automatic_run+0xfe>
					display_num('B', 2, ((timer1_counter + 100)%1000)/100);
 80004b6:	4b8e      	ldr	r3, [pc, #568]	; (80006f0 <fsm_automatic_run+0x304>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80004be:	4b8d      	ldr	r3, [pc, #564]	; (80006f4 <fsm_automatic_run+0x308>)
 80004c0:	fb83 1302 	smull	r1, r3, r3, r2
 80004c4:	1199      	asrs	r1, r3, #6
 80004c6:	17d3      	asrs	r3, r2, #31
 80004c8:	1acb      	subs	r3, r1, r3
 80004ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004ce:	fb01 f303 	mul.w	r3, r1, r3
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	4a88      	ldr	r2, [pc, #544]	; (80006f8 <fsm_automatic_run+0x30c>)
 80004d6:	fb82 1203 	smull	r1, r2, r2, r3
 80004da:	1152      	asrs	r2, r2, #5
 80004dc:	17db      	asrs	r3, r3, #31
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	461a      	mov	r2, r3
 80004e2:	2102      	movs	r1, #2
 80004e4:	2042      	movs	r0, #66	; 0x42
 80004e6:	f000 fd3b 	bl	8000f60 <display_num>
				}
				setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, ON, OFF);
 80004ea:	2301      	movs	r3, #1
 80004ec:	9302      	str	r3, [sp, #8]
 80004ee:	2300      	movs	r3, #0
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2340      	movs	r3, #64	; 0x40
 80004f8:	2220      	movs	r2, #32
 80004fa:	2110      	movs	r1, #16
 80004fc:	4878      	ldr	r0, [pc, #480]	; (80006e0 <fsm_automatic_run+0x2f4>)
 80004fe:	f001 f963 	bl	80017c8 <setColor>
 8000502:	e053      	b.n	80005ac <fsm_automatic_run+0x1c0>
			}
			else {
				if (idx == 0) {
 8000504:	4b79      	ldr	r3, [pc, #484]	; (80006ec <fsm_automatic_run+0x300>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d11d      	bne.n	8000548 <fsm_automatic_run+0x15c>
					display_num('B', 1, ((timer1_counter + 100)/100 - amber_duration/1000)/10);
 800050c:	4b78      	ldr	r3, [pc, #480]	; (80006f0 <fsm_automatic_run+0x304>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3364      	adds	r3, #100	; 0x64
 8000512:	4a79      	ldr	r2, [pc, #484]	; (80006f8 <fsm_automatic_run+0x30c>)
 8000514:	fb82 1203 	smull	r1, r2, r2, r3
 8000518:	1152      	asrs	r2, r2, #5
 800051a:	17db      	asrs	r3, r3, #31
 800051c:	1ad2      	subs	r2, r2, r3
 800051e:	4b77      	ldr	r3, [pc, #476]	; (80006fc <fsm_automatic_run+0x310>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4974      	ldr	r1, [pc, #464]	; (80006f4 <fsm_automatic_run+0x308>)
 8000524:	fb81 0103 	smull	r0, r1, r1, r3
 8000528:	1189      	asrs	r1, r1, #6
 800052a:	17db      	asrs	r3, r3, #31
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	4413      	add	r3, r2
 8000530:	4a73      	ldr	r2, [pc, #460]	; (8000700 <fsm_automatic_run+0x314>)
 8000532:	fb82 1203 	smull	r1, r2, r2, r3
 8000536:	1092      	asrs	r2, r2, #2
 8000538:	17db      	asrs	r3, r3, #31
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	461a      	mov	r2, r3
 800053e:	2101      	movs	r1, #1
 8000540:	2042      	movs	r0, #66	; 0x42
 8000542:	f000 fd0d 	bl	8000f60 <display_num>
 8000546:	e025      	b.n	8000594 <fsm_automatic_run+0x1a8>
				}
				else if (idx == 1) {
 8000548:	4b68      	ldr	r3, [pc, #416]	; (80006ec <fsm_automatic_run+0x300>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d121      	bne.n	8000594 <fsm_automatic_run+0x1a8>
					display_num('B', 2, ((timer1_counter + 100)/100 - amber_duration/1000)%10);
 8000550:	4b67      	ldr	r3, [pc, #412]	; (80006f0 <fsm_automatic_run+0x304>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3364      	adds	r3, #100	; 0x64
 8000556:	4a68      	ldr	r2, [pc, #416]	; (80006f8 <fsm_automatic_run+0x30c>)
 8000558:	fb82 1203 	smull	r1, r2, r2, r3
 800055c:	1152      	asrs	r2, r2, #5
 800055e:	17db      	asrs	r3, r3, #31
 8000560:	1ad2      	subs	r2, r2, r3
 8000562:	4b66      	ldr	r3, [pc, #408]	; (80006fc <fsm_automatic_run+0x310>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4963      	ldr	r1, [pc, #396]	; (80006f4 <fsm_automatic_run+0x308>)
 8000568:	fb81 0103 	smull	r0, r1, r1, r3
 800056c:	1189      	asrs	r1, r1, #6
 800056e:	17db      	asrs	r3, r3, #31
 8000570:	1a5b      	subs	r3, r3, r1
 8000572:	441a      	add	r2, r3
 8000574:	4b62      	ldr	r3, [pc, #392]	; (8000700 <fsm_automatic_run+0x314>)
 8000576:	fb83 1302 	smull	r1, r3, r3, r2
 800057a:	1099      	asrs	r1, r3, #2
 800057c:	17d3      	asrs	r3, r2, #31
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	460b      	mov	r3, r1
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	440b      	add	r3, r1
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	1ad1      	subs	r1, r2, r3
 800058a:	460a      	mov	r2, r1
 800058c:	2102      	movs	r1, #2
 800058e:	2042      	movs	r0, #66	; 0x42
 8000590:	f000 fce6 	bl	8000f60 <display_num>
				}
				setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, OFF, ON);
 8000594:	2300      	movs	r3, #0
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	2301      	movs	r3, #1
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2301      	movs	r3, #1
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2340      	movs	r3, #64	; 0x40
 80005a2:	2220      	movs	r2, #32
 80005a4:	2110      	movs	r1, #16
 80005a6:	484e      	ldr	r0, [pc, #312]	; (80006e0 <fsm_automatic_run+0x2f4>)
 80005a8:	f001 f90e 	bl	80017c8 <setColor>
			}

			if (timer1_flag == 1) {
 80005ac:	4b55      	ldr	r3, [pc, #340]	; (8000704 <fsm_automatic_run+0x318>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	f040 80ea 	bne.w	800078a <fsm_automatic_run+0x39e>
				color = GREEN;
 80005b6:	4b49      	ldr	r3, [pc, #292]	; (80006dc <fsm_automatic_run+0x2f0>)
 80005b8:	2204      	movs	r2, #4
 80005ba:	601a      	str	r2, [r3, #0]
				setTimer1(green_duration);
 80005bc:	4b4a      	ldr	r3, [pc, #296]	; (80006e8 <fsm_automatic_run+0x2fc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 ff85 	bl	80014d0 <setTimer1>
			}
			break;
 80005c6:	e0e0      	b.n	800078a <fsm_automatic_run+0x39e>
		case AMBER:
			display_time();
 80005c8:	f000 fd32 	bl	8001030 <display_time>
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, ON, OFF);
 80005cc:	2301      	movs	r3, #1
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	2300      	movs	r3, #0
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2301      	movs	r3, #1
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2308      	movs	r3, #8
 80005da:	2204      	movs	r2, #4
 80005dc:	2102      	movs	r1, #2
 80005de:	4840      	ldr	r0, [pc, #256]	; (80006e0 <fsm_automatic_run+0x2f4>)
 80005e0:	f001 f8f2 	bl	80017c8 <setColor>

			if (idx == 0) {
 80005e4:	4b41      	ldr	r3, [pc, #260]	; (80006ec <fsm_automatic_run+0x300>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d10e      	bne.n	800060a <fsm_automatic_run+0x21e>
				display_num('B', 1, (timer1_counter + 100)/1000);
 80005ec:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <fsm_automatic_run+0x304>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3364      	adds	r3, #100	; 0x64
 80005f2:	4a40      	ldr	r2, [pc, #256]	; (80006f4 <fsm_automatic_run+0x308>)
 80005f4:	fb82 1203 	smull	r1, r2, r2, r3
 80005f8:	1192      	asrs	r2, r2, #6
 80005fa:	17db      	asrs	r3, r3, #31
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	2101      	movs	r1, #1
 8000602:	2042      	movs	r0, #66	; 0x42
 8000604:	f000 fcac 	bl	8000f60 <display_num>
 8000608:	e01d      	b.n	8000646 <fsm_automatic_run+0x25a>
			}
			else if (idx == 1) {
 800060a:	4b38      	ldr	r3, [pc, #224]	; (80006ec <fsm_automatic_run+0x300>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d119      	bne.n	8000646 <fsm_automatic_run+0x25a>
				display_num('B', 2, ((timer1_counter + 100)%1000)/100);
 8000612:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <fsm_automatic_run+0x304>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800061a:	4b36      	ldr	r3, [pc, #216]	; (80006f4 <fsm_automatic_run+0x308>)
 800061c:	fb83 1302 	smull	r1, r3, r3, r2
 8000620:	1199      	asrs	r1, r3, #6
 8000622:	17d3      	asrs	r3, r2, #31
 8000624:	1acb      	subs	r3, r1, r3
 8000626:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800062a:	fb01 f303 	mul.w	r3, r1, r3
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4a31      	ldr	r2, [pc, #196]	; (80006f8 <fsm_automatic_run+0x30c>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	1152      	asrs	r2, r2, #5
 8000638:	17db      	asrs	r3, r3, #31
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	461a      	mov	r2, r3
 800063e:	2102      	movs	r1, #2
 8000640:	2042      	movs	r0, #66	; 0x42
 8000642:	f000 fc8d 	bl	8000f60 <display_num>
			}
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, ON, OFF, OFF);
 8000646:	2301      	movs	r3, #1
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	2301      	movs	r3, #1
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2300      	movs	r3, #0
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2340      	movs	r3, #64	; 0x40
 8000654:	2220      	movs	r2, #32
 8000656:	2110      	movs	r1, #16
 8000658:	4821      	ldr	r0, [pc, #132]	; (80006e0 <fsm_automatic_run+0x2f4>)
 800065a:	f001 f8b5 	bl	80017c8 <setColor>

			if (timer1_flag == 1) {
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <fsm_automatic_run+0x318>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	f040 8093 	bne.w	800078e <fsm_automatic_run+0x3a2>
				color = RED;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <fsm_automatic_run+0x2f0>)
 800066a:	2202      	movs	r2, #2
 800066c:	601a      	str	r2, [r3, #0]
				setTimer1(red_duration);
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <fsm_automatic_run+0x2f8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ff2c 	bl	80014d0 <setTimer1>
			}
			break;
 8000678:	e089      	b.n	800078e <fsm_automatic_run+0x3a2>
		case GREEN:
			display_time();
 800067a:	f000 fcd9 	bl	8001030 <display_time>
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, OFF, ON);
 800067e:	2300      	movs	r3, #0
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	2301      	movs	r3, #1
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2308      	movs	r3, #8
 800068c:	2204      	movs	r2, #4
 800068e:	2102      	movs	r1, #2
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <fsm_automatic_run+0x2f4>)
 8000692:	f001 f899 	bl	80017c8 <setColor>

			if (idx == 0) {
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <fsm_automatic_run+0x300>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d134      	bne.n	8000708 <fsm_automatic_run+0x31c>
				display_num('B', 1, ((timer1_counter + 100)/100 + amber_duration/1000)/10);
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <fsm_automatic_run+0x304>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3364      	adds	r3, #100	; 0x64
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <fsm_automatic_run+0x30c>)
 80006a6:	fb82 1203 	smull	r1, r2, r2, r3
 80006aa:	1152      	asrs	r2, r2, #5
 80006ac:	17db      	asrs	r3, r3, #31
 80006ae:	1ad2      	subs	r2, r2, r3
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <fsm_automatic_run+0x310>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	490f      	ldr	r1, [pc, #60]	; (80006f4 <fsm_automatic_run+0x308>)
 80006b6:	fb81 0103 	smull	r0, r1, r1, r3
 80006ba:	1189      	asrs	r1, r1, #6
 80006bc:	17db      	asrs	r3, r3, #31
 80006be:	1acb      	subs	r3, r1, r3
 80006c0:	4413      	add	r3, r2
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <fsm_automatic_run+0x314>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1092      	asrs	r2, r2, #2
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	2101      	movs	r1, #1
 80006d2:	2042      	movs	r0, #66	; 0x42
 80006d4:	f000 fc44 	bl	8000f60 <display_num>
 80006d8:	e03c      	b.n	8000754 <fsm_automatic_run+0x368>
 80006da:	bf00      	nop
 80006dc:	2000003c 	.word	0x2000003c
 80006e0:	40010800 	.word	0x40010800
 80006e4:	20000044 	.word	0x20000044
 80006e8:	2000004c 	.word	0x2000004c
 80006ec:	20000118 	.word	0x20000118
 80006f0:	20000100 	.word	0x20000100
 80006f4:	10624dd3 	.word	0x10624dd3
 80006f8:	51eb851f 	.word	0x51eb851f
 80006fc:	20000048 	.word	0x20000048
 8000700:	66666667 	.word	0x66666667
 8000704:	20000104 	.word	0x20000104
			}
			else if (idx == 1) {
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <fsm_automatic_run+0x3b0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d121      	bne.n	8000754 <fsm_automatic_run+0x368>
				display_num('B', 2, ((timer1_counter + 100)/100 + amber_duration/1000)%10);
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <fsm_automatic_run+0x3b4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3364      	adds	r3, #100	; 0x64
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <fsm_automatic_run+0x3b8>)
 8000718:	fb82 1203 	smull	r1, r2, r2, r3
 800071c:	1152      	asrs	r2, r2, #5
 800071e:	17db      	asrs	r3, r3, #31
 8000720:	1ad2      	subs	r2, r2, r3
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <fsm_automatic_run+0x3bc>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4921      	ldr	r1, [pc, #132]	; (80007ac <fsm_automatic_run+0x3c0>)
 8000728:	fb81 0103 	smull	r0, r1, r1, r3
 800072c:	1189      	asrs	r1, r1, #6
 800072e:	17db      	asrs	r3, r3, #31
 8000730:	1acb      	subs	r3, r1, r3
 8000732:	441a      	add	r2, r3
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <fsm_automatic_run+0x3c4>)
 8000736:	fb83 1302 	smull	r1, r3, r3, r2
 800073a:	1099      	asrs	r1, r3, #2
 800073c:	17d3      	asrs	r3, r2, #31
 800073e:	1ac9      	subs	r1, r1, r3
 8000740:	460b      	mov	r3, r1
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	440b      	add	r3, r1
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	1ad1      	subs	r1, r2, r3
 800074a:	460a      	mov	r2, r1
 800074c:	2102      	movs	r1, #2
 800074e:	2042      	movs	r0, #66	; 0x42
 8000750:	f000 fc06 	bl	8000f60 <display_num>
			}
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, ON, OFF, OFF);
 8000754:	2301      	movs	r3, #1
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	2301      	movs	r3, #1
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	2300      	movs	r3, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2340      	movs	r3, #64	; 0x40
 8000762:	2220      	movs	r2, #32
 8000764:	2110      	movs	r1, #16
 8000766:	4813      	ldr	r0, [pc, #76]	; (80007b4 <fsm_automatic_run+0x3c8>)
 8000768:	f001 f82e 	bl	80017c8 <setColor>

			if (timer1_flag == 1) {
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <fsm_automatic_run+0x3cc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10e      	bne.n	8000792 <fsm_automatic_run+0x3a6>
				color = AMBER;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <fsm_automatic_run+0x3d0>)
 8000776:	2203      	movs	r2, #3
 8000778:	601a      	str	r2, [r3, #0]
				setTimer1(amber_duration);
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <fsm_automatic_run+0x3bc>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fea6 	bl	80014d0 <setTimer1>
			}
			break;
 8000784:	e005      	b.n	8000792 <fsm_automatic_run+0x3a6>
		default:
			break;
 8000786:	bf00      	nop
 8000788:	e004      	b.n	8000794 <fsm_automatic_run+0x3a8>
			break;
 800078a:	bf00      	nop
 800078c:	e002      	b.n	8000794 <fsm_automatic_run+0x3a8>
			break;
 800078e:	bf00      	nop
 8000790:	e000      	b.n	8000794 <fsm_automatic_run+0x3a8>
			break;
 8000792:	bf00      	nop
	}
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000118 	.word	0x20000118
 80007a0:	20000100 	.word	0x20000100
 80007a4:	51eb851f 	.word	0x51eb851f
 80007a8:	20000048 	.word	0x20000048
 80007ac:	10624dd3 	.word	0x10624dd3
 80007b0:	66666667 	.word	0x66666667
 80007b4:	40010800 	.word	0x40010800
 80007b8:	20000104 	.word	0x20000104
 80007bc:	2000003c 	.word	0x2000003c

080007c0 <fsm_manual_run>:
int amber_duration = 2000;
int amber_duration_temp = 0;
int green_duration = 3000;
int green_duration_temp = 0;

void fsm_manual_run() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af04      	add	r7, sp, #16
	switch(status) {
 80007c6:	4bba      	ldr	r3, [pc, #744]	; (8000ab0 <fsm_manual_run+0x2f0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b05      	cmp	r3, #5
 80007cc:	f200 838b 	bhi.w	8000ee6 <fsm_manual_run+0x726>
 80007d0:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <fsm_manual_run+0x18>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	08000809 	.word	0x08000809
 80007dc:	080007f1 	.word	0x080007f1
 80007e0:	08000911 	.word	0x08000911
 80007e4:	08000a7d 	.word	0x08000a7d
 80007e8:	08000c1f 	.word	0x08000c1f
 80007ec:	08000de1 	.word	0x08000de1
		case NORMAL:
			fsm_automatic_run();
 80007f0:	f7ff fdfc 	bl	80003ec <fsm_automatic_run>

			if (isButton1Pressed()) {
 80007f4:	f7ff fcaa 	bl	800014c <isButton1Pressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f000 8375 	beq.w	8000eea <fsm_manual_run+0x72a>
				status = INITIAL;
 8000800:	4bab      	ldr	r3, [pc, #684]	; (8000ab0 <fsm_manual_run+0x2f0>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
			}
			break;
 8000806:	e370      	b.n	8000eea <fsm_manual_run+0x72a>
		case INITIAL:
			setColor(GPIOA, LED_RED_A_Pin, LED_AMBER_A_Pin, LED_GREEN_A_Pin, OFF, OFF, OFF);
 8000808:	2301      	movs	r3, #1
 800080a:	9302      	str	r3, [sp, #8]
 800080c:	2301      	movs	r3, #1
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	2301      	movs	r3, #1
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2308      	movs	r3, #8
 8000816:	2204      	movs	r2, #4
 8000818:	2102      	movs	r1, #2
 800081a:	48a6      	ldr	r0, [pc, #664]	; (8000ab4 <fsm_manual_run+0x2f4>)
 800081c:	f000 ffd4 	bl	80017c8 <setColor>
			setColor(GPIOA, LED_RED_B_Pin, LED_AMBER_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 8000820:	2301      	movs	r3, #1
 8000822:	9302      	str	r3, [sp, #8]
 8000824:	2301      	movs	r3, #1
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	2301      	movs	r3, #1
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	2220      	movs	r2, #32
 8000830:	2110      	movs	r1, #16
 8000832:	48a0      	ldr	r0, [pc, #640]	; (8000ab4 <fsm_manual_run+0x2f4>)
 8000834:	f000 ffc8 	bl	80017c8 <setColor>
			setColor(GPIOA, ENA1_Pin, ENA2_Pin, ENA2_Pin, ON, ON, ON);
 8000838:	2300      	movs	r3, #0
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2300      	movs	r3, #0
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	2300      	movs	r3, #0
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	4899      	ldr	r0, [pc, #612]	; (8000ab4 <fsm_manual_run+0x2f4>)
 8000850:	f000 ffba 	bl	80017c8 <setColor>
			setColor(GPIOA, ENB1_Pin, ENB2_Pin, ENB2_Pin, ON, ON, ON);
 8000854:	2300      	movs	r3, #0
 8000856:	9302      	str	r3, [sp, #8]
 8000858:	2300      	movs	r3, #0
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	2300      	movs	r3, #0
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086c:	4891      	ldr	r0, [pc, #580]	; (8000ab4 <fsm_manual_run+0x2f4>)
 800086e:	f000 ffab 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, OFF, OFF, OFF);
 8000872:	2301      	movs	r3, #1
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	2301      	movs	r3, #1
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	2301      	movs	r3, #1
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	488b      	ldr	r0, [pc, #556]	; (8000ab8 <fsm_manual_run+0x2f8>)
 800088a:	f000 ff9d 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, OFF);
 800088e:	2301      	movs	r3, #1
 8000890:	9302      	str	r3, [sp, #8]
 8000892:	2301      	movs	r3, #1
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	2301      	movs	r3, #1
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a6:	4884      	ldr	r0, [pc, #528]	; (8000ab8 <fsm_manual_run+0x2f8>)
 80008a8:	f000 ff8e 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_6_Pin, SEG_A_Pin, SEG_B_Pin, OFF, OFF, OFF);
 80008ac:	2301      	movs	r3, #1
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	2301      	movs	r3, #1
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2302      	movs	r3, #2
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c0:	487d      	ldr	r0, [pc, #500]	; (8000ab8 <fsm_manual_run+0x2f8>)
 80008c2:	f000 ff81 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_C_Pin, SEG_D_Pin, SEG_E_Pin, OFF, OFF, OFF);
 80008c6:	2301      	movs	r3, #1
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	2301      	movs	r3, #1
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2310      	movs	r3, #16
 80008d4:	2208      	movs	r2, #8
 80008d6:	2104      	movs	r1, #4
 80008d8:	4877      	ldr	r0, [pc, #476]	; (8000ab8 <fsm_manual_run+0x2f8>)
 80008da:	f000 ff75 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_F_Pin, SEG_G_Pin, SEG_G_Pin, OFF, OFF, OFF);
 80008de:	2301      	movs	r3, #1
 80008e0:	9302      	str	r3, [sp, #8]
 80008e2:	2301      	movs	r3, #1
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	2301      	movs	r3, #1
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	2240      	movs	r2, #64	; 0x40
 80008ee:	2120      	movs	r1, #32
 80008f0:	4871      	ldr	r0, [pc, #452]	; (8000ab8 <fsm_manual_run+0x2f8>)
 80008f2:	f000 ff69 	bl	80017c8 <setColor>

			status = MODIFY_RED;
 80008f6:	4b6e      	ldr	r3, [pc, #440]	; (8000ab0 <fsm_manual_run+0x2f0>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	601a      	str	r2, [r3, #0]
			setTimer3(250);
 80008fc:	20fa      	movs	r0, #250	; 0xfa
 80008fe:	f000 fe1b 	bl	8001538 <setTimer3>
			setTimer2(147);
 8000902:	2093      	movs	r0, #147	; 0x93
 8000904:	f000 fdfe 	bl	8001504 <setTimer2>
			setTimer1(153);
 8000908:	2099      	movs	r0, #153	; 0x99
 800090a:	f000 fde1 	bl	80014d0 <setTimer1>
			break;
 800090e:	e2f5      	b.n	8000efc <fsm_manual_run+0x73c>
		case MODIFY_RED:
			if (timer1_flag == 1 && idx == 0) {
 8000910:	4b6a      	ldr	r3, [pc, #424]	; (8000abc <fsm_manual_run+0x2fc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d114      	bne.n	8000942 <fsm_manual_run+0x182>
 8000918:	4b69      	ldr	r3, [pc, #420]	; (8000ac0 <fsm_manual_run+0x300>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d110      	bne.n	8000942 <fsm_manual_run+0x182>
				setTimer1(153);
 8000920:	2099      	movs	r0, #153	; 0x99
 8000922:	f000 fdd5 	bl	80014d0 <setTimer1>
				display_num('A', 1, (red_duration)/10000);
 8000926:	4b67      	ldr	r3, [pc, #412]	; (8000ac4 <fsm_manual_run+0x304>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a67      	ldr	r2, [pc, #412]	; (8000ac8 <fsm_manual_run+0x308>)
 800092c:	fb82 1203 	smull	r1, r2, r2, r3
 8000930:	1312      	asrs	r2, r2, #12
 8000932:	17db      	asrs	r3, r3, #31
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	461a      	mov	r2, r3
 8000938:	2101      	movs	r1, #1
 800093a:	2041      	movs	r0, #65	; 0x41
 800093c:	f000 fb10 	bl	8000f60 <display_num>
 8000940:	e022      	b.n	8000988 <fsm_manual_run+0x1c8>
			}
			else if (timer1_flag == 1 && idx == 1) {
 8000942:	4b5e      	ldr	r3, [pc, #376]	; (8000abc <fsm_manual_run+0x2fc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d11e      	bne.n	8000988 <fsm_manual_run+0x1c8>
 800094a:	4b5d      	ldr	r3, [pc, #372]	; (8000ac0 <fsm_manual_run+0x300>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d11a      	bne.n	8000988 <fsm_manual_run+0x1c8>
				setTimer1(153);
 8000952:	2099      	movs	r0, #153	; 0x99
 8000954:	f000 fdbc 	bl	80014d0 <setTimer1>
				display_num('A', 2, ((red_duration)%10000)/1000);
 8000958:	4b5a      	ldr	r3, [pc, #360]	; (8000ac4 <fsm_manual_run+0x304>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b5a      	ldr	r3, [pc, #360]	; (8000ac8 <fsm_manual_run+0x308>)
 800095e:	fb83 1302 	smull	r1, r3, r3, r2
 8000962:	1319      	asrs	r1, r3, #12
 8000964:	17d3      	asrs	r3, r2, #31
 8000966:	1acb      	subs	r3, r1, r3
 8000968:	f242 7110 	movw	r1, #10000	; 0x2710
 800096c:	fb01 f303 	mul.w	r3, r1, r3
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	4a56      	ldr	r2, [pc, #344]	; (8000acc <fsm_manual_run+0x30c>)
 8000974:	fb82 1203 	smull	r1, r2, r2, r3
 8000978:	1192      	asrs	r2, r2, #6
 800097a:	17db      	asrs	r3, r3, #31
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	461a      	mov	r2, r3
 8000980:	2102      	movs	r1, #2
 8000982:	2041      	movs	r0, #65	; 0x41
 8000984:	f000 faec 	bl	8000f60 <display_num>
			}

			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8000988:	4b51      	ldr	r3, [pc, #324]	; (8000ad0 <fsm_manual_run+0x310>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d10c      	bne.n	80009aa <fsm_manual_run+0x1ea>
 8000990:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <fsm_manual_run+0x300>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d108      	bne.n	80009aa <fsm_manual_run+0x1ea>
				setTimer2(147);
 8000998:	2093      	movs	r0, #147	; 0x93
 800099a:	f000 fdb3 	bl	8001504 <setTimer2>
				display_num('B', 1, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2101      	movs	r1, #1
 80009a2:	2042      	movs	r0, #66	; 0x42
 80009a4:	f000 fadc 	bl	8000f60 <display_num>
 80009a8:	e00f      	b.n	80009ca <fsm_manual_run+0x20a>
			}
			else if (timer2_flag == 1 && idx == 1) {
 80009aa:	4b49      	ldr	r3, [pc, #292]	; (8000ad0 <fsm_manual_run+0x310>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d10b      	bne.n	80009ca <fsm_manual_run+0x20a>
 80009b2:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <fsm_manual_run+0x300>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d107      	bne.n	80009ca <fsm_manual_run+0x20a>
				setTimer2(147);
 80009ba:	2093      	movs	r0, #147	; 0x93
 80009bc:	f000 fda2 	bl	8001504 <setTimer2>
				display_num('B', 2, MODIFY_RED);
 80009c0:	2202      	movs	r2, #2
 80009c2:	2102      	movs	r1, #2
 80009c4:	2042      	movs	r0, #66	; 0x42
 80009c6:	f000 facb 	bl	8000f60 <display_num>
			}

			setColor(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin, OFF, OFF, OFF);
 80009ca:	2301      	movs	r3, #1
 80009cc:	9302      	str	r3, [sp, #8]
 80009ce:	2301      	movs	r3, #1
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	2301      	movs	r3, #1
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2320      	movs	r3, #32
 80009d8:	2220      	movs	r2, #32
 80009da:	2104      	movs	r1, #4
 80009dc:	4835      	ldr	r0, [pc, #212]	; (8000ab4 <fsm_manual_run+0x2f4>)
 80009de:	f000 fef3 	bl	80017c8 <setColor>
			setColor(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 80009e2:	2301      	movs	r3, #1
 80009e4:	9302      	str	r3, [sp, #8]
 80009e6:	2301      	movs	r3, #1
 80009e8:	9301      	str	r3, [sp, #4]
 80009ea:	2301      	movs	r3, #1
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	2240      	movs	r2, #64	; 0x40
 80009f2:	2108      	movs	r1, #8
 80009f4:	482f      	ldr	r0, [pc, #188]	; (8000ab4 <fsm_manual_run+0x2f4>)
 80009f6:	f000 fee7 	bl	80017c8 <setColor>
			if (timer3_flag == 1) {
 80009fa:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <fsm_manual_run+0x314>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d108      	bne.n	8000a14 <fsm_manual_run+0x254>
				setTimer3(250);
 8000a02:	20fa      	movs	r0, #250	; 0xfa
 8000a04:	f000 fd98 	bl	8001538 <setTimer3>
				setColorToggle(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin);
 8000a08:	2310      	movs	r3, #16
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4829      	ldr	r0, [pc, #164]	; (8000ab4 <fsm_manual_run+0x2f4>)
 8000a10:	f000 fefe 	bl	8001810 <setColorToggle>
			}

			if(isButton3Pressed()) red_duration = red_duration;
 8000a14:	f7ff fc7a 	bl	800030c <isButton3Pressed>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <fsm_manual_run+0x266>
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a24:	6013      	str	r3, [r2, #0]

			if(isButton2Pressed()) {
 8000a26:	f7ff fc01 	bl	800022c <isButton2Pressed>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d012      	beq.n	8000a56 <fsm_manual_run+0x296>
				red_duration_temp = red_duration;
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a28      	ldr	r2, [pc, #160]	; (8000ad8 <fsm_manual_run+0x318>)
 8000a36:	6013      	str	r3, [r2, #0]
				red_duration = red_duration + 1000;
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a40:	4a20      	ldr	r2, [pc, #128]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a42:	6013      	str	r3, [r2, #0]
				if (red_duration > 99000) red_duration = 1000;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a24      	ldr	r2, [pc, #144]	; (8000adc <fsm_manual_run+0x31c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	dd03      	ble.n	8000a56 <fsm_manual_run+0x296>
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <fsm_manual_run+0x304>)
 8000a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a54:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8000a56:	f7ff fb79 	bl	800014c <isButton1Pressed>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f000 8246 	beq.w	8000eee <fsm_manual_run+0x72e>
				status = MODIFY_AMBER;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <fsm_manual_run+0x2f0>)
 8000a64:	2203      	movs	r2, #3
 8000a66:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8000a68:	20fa      	movs	r0, #250	; 0xfa
 8000a6a:	f000 fd65 	bl	8001538 <setTimer3>
				setTimer2(147);
 8000a6e:	2093      	movs	r0, #147	; 0x93
 8000a70:	f000 fd48 	bl	8001504 <setTimer2>
				setTimer1(153);
 8000a74:	2099      	movs	r0, #153	; 0x99
 8000a76:	f000 fd2b 	bl	80014d0 <setTimer1>
			}
			break;
 8000a7a:	e238      	b.n	8000eee <fsm_manual_run+0x72e>
		case MODIFY_AMBER:
			if (timer1_flag == 1 && idx == 0) {
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <fsm_manual_run+0x2fc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d12f      	bne.n	8000ae4 <fsm_manual_run+0x324>
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <fsm_manual_run+0x300>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d12b      	bne.n	8000ae4 <fsm_manual_run+0x324>
				setTimer1(153);
 8000a8c:	2099      	movs	r0, #153	; 0x99
 8000a8e:	f000 fd1f 	bl	80014d0 <setTimer1>
				display_num('A', 1, (amber_duration)/10000);
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <fsm_manual_run+0x320>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <fsm_manual_run+0x308>)
 8000a98:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9c:	1312      	asrs	r2, r2, #12
 8000a9e:	17db      	asrs	r3, r3, #31
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2041      	movs	r0, #65	; 0x41
 8000aa8:	f000 fa5a 	bl	8000f60 <display_num>
 8000aac:	e03d      	b.n	8000b2a <fsm_manual_run+0x36a>
 8000aae:	bf00      	nop
 8000ab0:	20000040 	.word	0x20000040
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40010c00 	.word	0x40010c00
 8000abc:	20000104 	.word	0x20000104
 8000ac0:	20000118 	.word	0x20000118
 8000ac4:	20000044 	.word	0x20000044
 8000ac8:	68db8bad 	.word	0x68db8bad
 8000acc:	10624dd3 	.word	0x10624dd3
 8000ad0:	2000010c 	.word	0x2000010c
 8000ad4:	20000114 	.word	0x20000114
 8000ad8:	200000ec 	.word	0x200000ec
 8000adc:	000182b8 	.word	0x000182b8
 8000ae0:	20000048 	.word	0x20000048
			}
			else if (timer1_flag == 1 && idx == 1) {
 8000ae4:	4bb1      	ldr	r3, [pc, #708]	; (8000dac <fsm_manual_run+0x5ec>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d11e      	bne.n	8000b2a <fsm_manual_run+0x36a>
 8000aec:	4bb0      	ldr	r3, [pc, #704]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d11a      	bne.n	8000b2a <fsm_manual_run+0x36a>
				setTimer1(153);
 8000af4:	2099      	movs	r0, #153	; 0x99
 8000af6:	f000 fceb 	bl	80014d0 <setTimer1>
				display_num('A', 2, ((amber_duration)%10000)/1000);
 8000afa:	4bae      	ldr	r3, [pc, #696]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4bae      	ldr	r3, [pc, #696]	; (8000db8 <fsm_manual_run+0x5f8>)
 8000b00:	fb83 1302 	smull	r1, r3, r3, r2
 8000b04:	1319      	asrs	r1, r3, #12
 8000b06:	17d3      	asrs	r3, r2, #31
 8000b08:	1acb      	subs	r3, r1, r3
 8000b0a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b0e:	fb01 f303 	mul.w	r3, r1, r3
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	4aa9      	ldr	r2, [pc, #676]	; (8000dbc <fsm_manual_run+0x5fc>)
 8000b16:	fb82 1203 	smull	r1, r2, r2, r3
 8000b1a:	1192      	asrs	r2, r2, #6
 8000b1c:	17db      	asrs	r3, r3, #31
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	2102      	movs	r1, #2
 8000b24:	2041      	movs	r0, #65	; 0x41
 8000b26:	f000 fa1b 	bl	8000f60 <display_num>
			}

			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8000b2a:	4ba5      	ldr	r3, [pc, #660]	; (8000dc0 <fsm_manual_run+0x600>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d10c      	bne.n	8000b4c <fsm_manual_run+0x38c>
 8000b32:	4b9f      	ldr	r3, [pc, #636]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d108      	bne.n	8000b4c <fsm_manual_run+0x38c>
				setTimer2(147);
 8000b3a:	2093      	movs	r0, #147	; 0x93
 8000b3c:	f000 fce2 	bl	8001504 <setTimer2>
				display_num('B', 1, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2101      	movs	r1, #1
 8000b44:	2042      	movs	r0, #66	; 0x42
 8000b46:	f000 fa0b 	bl	8000f60 <display_num>
 8000b4a:	e00f      	b.n	8000b6c <fsm_manual_run+0x3ac>
			}
			else if (timer2_flag == 1 && idx == 1) {
 8000b4c:	4b9c      	ldr	r3, [pc, #624]	; (8000dc0 <fsm_manual_run+0x600>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d10b      	bne.n	8000b6c <fsm_manual_run+0x3ac>
 8000b54:	4b96      	ldr	r3, [pc, #600]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d107      	bne.n	8000b6c <fsm_manual_run+0x3ac>
				setTimer2(147);
 8000b5c:	2093      	movs	r0, #147	; 0x93
 8000b5e:	f000 fcd1 	bl	8001504 <setTimer2>
				display_num('B', 2, MODIFY_AMBER);
 8000b62:	2203      	movs	r2, #3
 8000b64:	2102      	movs	r1, #2
 8000b66:	2042      	movs	r0, #66	; 0x42
 8000b68:	f000 f9fa 	bl	8000f60 <display_num>
			}

			setColor(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin, OFF, OFF, OFF);
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	2301      	movs	r3, #1
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	2301      	movs	r3, #1
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2310      	movs	r3, #16
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4891      	ldr	r0, [pc, #580]	; (8000dc4 <fsm_manual_run+0x604>)
 8000b80:	f000 fe22 	bl	80017c8 <setColor>
			setColor(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 8000b84:	2301      	movs	r3, #1
 8000b86:	9302      	str	r3, [sp, #8]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2340      	movs	r3, #64	; 0x40
 8000b92:	2240      	movs	r2, #64	; 0x40
 8000b94:	2108      	movs	r1, #8
 8000b96:	488b      	ldr	r0, [pc, #556]	; (8000dc4 <fsm_manual_run+0x604>)
 8000b98:	f000 fe16 	bl	80017c8 <setColor>
			if (timer3_flag == 1) {
 8000b9c:	4b8a      	ldr	r3, [pc, #552]	; (8000dc8 <fsm_manual_run+0x608>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d108      	bne.n	8000bb6 <fsm_manual_run+0x3f6>
				setTimer3(250);
 8000ba4:	20fa      	movs	r0, #250	; 0xfa
 8000ba6:	f000 fcc7 	bl	8001538 <setTimer3>
				setColorToggle(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin);
 8000baa:	2320      	movs	r3, #32
 8000bac:	2220      	movs	r2, #32
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4884      	ldr	r0, [pc, #528]	; (8000dc4 <fsm_manual_run+0x604>)
 8000bb2:	f000 fe2d 	bl	8001810 <setColorToggle>
			}

			if(isButton3Pressed()) amber_duration = amber_duration;
 8000bb6:	f7ff fba9 	bl	800030c <isButton3Pressed>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <fsm_manual_run+0x408>
 8000bc0:	4b7c      	ldr	r3, [pc, #496]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a7b      	ldr	r2, [pc, #492]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000bc6:	6013      	str	r3, [r2, #0]

			if(isButton2Pressed()) {
 8000bc8:	f7ff fb30 	bl	800022c <isButton2Pressed>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d012      	beq.n	8000bf8 <fsm_manual_run+0x438>
				amber_duration_temp = amber_duration;
 8000bd2:	4b78      	ldr	r3, [pc, #480]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a7d      	ldr	r2, [pc, #500]	; (8000dcc <fsm_manual_run+0x60c>)
 8000bd8:	6013      	str	r3, [r2, #0]
				amber_duration = amber_duration + 1000;
 8000bda:	4b76      	ldr	r3, [pc, #472]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000be2:	4a74      	ldr	r2, [pc, #464]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000be4:	6013      	str	r3, [r2, #0]
				if (amber_duration > 99000) amber_duration = 1000;
 8000be6:	4b73      	ldr	r3, [pc, #460]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a79      	ldr	r2, [pc, #484]	; (8000dd0 <fsm_manual_run+0x610>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	dd03      	ble.n	8000bf8 <fsm_manual_run+0x438>
 8000bf0:	4b70      	ldr	r3, [pc, #448]	; (8000db4 <fsm_manual_run+0x5f4>)
 8000bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf6:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8000bf8:	f7ff faa8 	bl	800014c <isButton1Pressed>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8177 	beq.w	8000ef2 <fsm_manual_run+0x732>
				status = MODIFY_GREEN;
 8000c04:	4b73      	ldr	r3, [pc, #460]	; (8000dd4 <fsm_manual_run+0x614>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8000c0a:	20fa      	movs	r0, #250	; 0xfa
 8000c0c:	f000 fc94 	bl	8001538 <setTimer3>
				setTimer2(147);
 8000c10:	2093      	movs	r0, #147	; 0x93
 8000c12:	f000 fc77 	bl	8001504 <setTimer2>
				setTimer1(153);
 8000c16:	2099      	movs	r0, #153	; 0x99
 8000c18:	f000 fc5a 	bl	80014d0 <setTimer1>
			}
			break;
 8000c1c:	e169      	b.n	8000ef2 <fsm_manual_run+0x732>
		case MODIFY_GREEN:
			if (timer1_flag == 1 && idx == 0) {
 8000c1e:	4b63      	ldr	r3, [pc, #396]	; (8000dac <fsm_manual_run+0x5ec>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d114      	bne.n	8000c50 <fsm_manual_run+0x490>
 8000c26:	4b62      	ldr	r3, [pc, #392]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d110      	bne.n	8000c50 <fsm_manual_run+0x490>
				setTimer1(153);
 8000c2e:	2099      	movs	r0, #153	; 0x99
 8000c30:	f000 fc4e 	bl	80014d0 <setTimer1>
				display_num('A', 1, (green_duration)/10000);
 8000c34:	4b68      	ldr	r3, [pc, #416]	; (8000dd8 <fsm_manual_run+0x618>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a5f      	ldr	r2, [pc, #380]	; (8000db8 <fsm_manual_run+0x5f8>)
 8000c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3e:	1312      	asrs	r2, r2, #12
 8000c40:	17db      	asrs	r3, r3, #31
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	2101      	movs	r1, #1
 8000c48:	2041      	movs	r0, #65	; 0x41
 8000c4a:	f000 f989 	bl	8000f60 <display_num>
 8000c4e:	e022      	b.n	8000c96 <fsm_manual_run+0x4d6>
			}
			else if (timer1_flag == 1 && idx == 1) {
 8000c50:	4b56      	ldr	r3, [pc, #344]	; (8000dac <fsm_manual_run+0x5ec>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d11e      	bne.n	8000c96 <fsm_manual_run+0x4d6>
 8000c58:	4b55      	ldr	r3, [pc, #340]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d11a      	bne.n	8000c96 <fsm_manual_run+0x4d6>
				setTimer1(153);
 8000c60:	2099      	movs	r0, #153	; 0x99
 8000c62:	f000 fc35 	bl	80014d0 <setTimer1>
				display_num('A', 2, ((green_duration)%10000)/1000);
 8000c66:	4b5c      	ldr	r3, [pc, #368]	; (8000dd8 <fsm_manual_run+0x618>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b53      	ldr	r3, [pc, #332]	; (8000db8 <fsm_manual_run+0x5f8>)
 8000c6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c70:	1319      	asrs	r1, r3, #12
 8000c72:	17d3      	asrs	r3, r2, #31
 8000c74:	1acb      	subs	r3, r1, r3
 8000c76:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c7a:	fb01 f303 	mul.w	r3, r1, r3
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	4a4e      	ldr	r2, [pc, #312]	; (8000dbc <fsm_manual_run+0x5fc>)
 8000c82:	fb82 1203 	smull	r1, r2, r2, r3
 8000c86:	1192      	asrs	r2, r2, #6
 8000c88:	17db      	asrs	r3, r3, #31
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	2102      	movs	r1, #2
 8000c90:	2041      	movs	r0, #65	; 0x41
 8000c92:	f000 f965 	bl	8000f60 <display_num>
			}

			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8000c96:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <fsm_manual_run+0x600>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d10c      	bne.n	8000cb8 <fsm_manual_run+0x4f8>
 8000c9e:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d108      	bne.n	8000cb8 <fsm_manual_run+0x4f8>
				setTimer2(147);
 8000ca6:	2093      	movs	r0, #147	; 0x93
 8000ca8:	f000 fc2c 	bl	8001504 <setTimer2>
				display_num('B', 1, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2042      	movs	r0, #66	; 0x42
 8000cb2:	f000 f955 	bl	8000f60 <display_num>
 8000cb6:	e00f      	b.n	8000cd8 <fsm_manual_run+0x518>
			}
			else if (timer2_flag == 1 && idx == 1) {
 8000cb8:	4b41      	ldr	r3, [pc, #260]	; (8000dc0 <fsm_manual_run+0x600>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d10b      	bne.n	8000cd8 <fsm_manual_run+0x518>
 8000cc0:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <fsm_manual_run+0x5f0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d107      	bne.n	8000cd8 <fsm_manual_run+0x518>
				setTimer2(147);
 8000cc8:	2093      	movs	r0, #147	; 0x93
 8000cca:	f000 fc1b 	bl	8001504 <setTimer2>
				display_num('B', 2, MODIFY_GREEN);
 8000cce:	2204      	movs	r2, #4
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	2042      	movs	r0, #66	; 0x42
 8000cd4:	f000 f944 	bl	8000f60 <display_num>
			}

			setColor(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin, OFF, OFF, OFF);
 8000cd8:	2301      	movs	r3, #1
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	2210      	movs	r2, #16
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4836      	ldr	r0, [pc, #216]	; (8000dc4 <fsm_manual_run+0x604>)
 8000cec:	f000 fd6c 	bl	80017c8 <setColor>
			setColor(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin, OFF, OFF, OFF);
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	2220      	movs	r2, #32
 8000d00:	2104      	movs	r1, #4
 8000d02:	4830      	ldr	r0, [pc, #192]	; (8000dc4 <fsm_manual_run+0x604>)
 8000d04:	f000 fd60 	bl	80017c8 <setColor>
			if (timer3_flag == 1) {
 8000d08:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <fsm_manual_run+0x608>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d108      	bne.n	8000d22 <fsm_manual_run+0x562>
				setTimer3(250);
 8000d10:	20fa      	movs	r0, #250	; 0xfa
 8000d12:	f000 fc11 	bl	8001538 <setTimer3>
				setColorToggle(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin);
 8000d16:	2340      	movs	r3, #64	; 0x40
 8000d18:	2240      	movs	r2, #64	; 0x40
 8000d1a:	2108      	movs	r1, #8
 8000d1c:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <fsm_manual_run+0x604>)
 8000d1e:	f000 fd77 	bl	8001810 <setColorToggle>
			}

			if(isButton3Pressed()) {
 8000d22:	f7ff faf3 	bl	800030c <isButton3Pressed>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00d      	beq.n	8000d48 <fsm_manual_run+0x588>
				if(isErrorOccured()) {
 8000d2c:	f000 f900 	bl	8000f30 <isErrorOccured>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d008      	beq.n	8000d48 <fsm_manual_run+0x588>
					setTimer1(153);
 8000d36:	2099      	movs	r0, #153	; 0x99
 8000d38:	f000 fbca 	bl	80014d0 <setTimer1>
					setTimer2(147);
 8000d3c:	2093      	movs	r0, #147	; 0x93
 8000d3e:	f000 fbe1 	bl	8001504 <setTimer2>
					status = FAULT_CONDITION;
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <fsm_manual_run+0x614>)
 8000d44:	2205      	movs	r2, #5
 8000d46:	601a      	str	r2, [r3, #0]
				}
			}

			if(isButton2Pressed()) {
 8000d48:	f7ff fa70 	bl	800022c <isButton2Pressed>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d012      	beq.n	8000d78 <fsm_manual_run+0x5b8>
				green_duration_temp = green_duration;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <fsm_manual_run+0x618>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <fsm_manual_run+0x61c>)
 8000d58:	6013      	str	r3, [r2, #0]
				green_duration = green_duration + 1000;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <fsm_manual_run+0x618>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <fsm_manual_run+0x618>)
 8000d64:	6013      	str	r3, [r2, #0]
				if (green_duration > 99000) green_duration = 1000;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <fsm_manual_run+0x618>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <fsm_manual_run+0x610>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	dd03      	ble.n	8000d78 <fsm_manual_run+0x5b8>
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <fsm_manual_run+0x618>)
 8000d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d76:	601a      	str	r2, [r3, #0]
			}

			if (isButton1Pressed()) {
 8000d78:	f7ff f9e8 	bl	800014c <isButton1Pressed>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 80b9 	beq.w	8000ef6 <fsm_manual_run+0x736>
				if(isErrorOccured()) {
 8000d84:	f000 f8d4 	bl	8000f30 <isErrorOccured>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d009      	beq.n	8000da2 <fsm_manual_run+0x5e2>
					setTimer1(153);
 8000d8e:	2099      	movs	r0, #153	; 0x99
 8000d90:	f000 fb9e 	bl	80014d0 <setTimer1>
					setTimer2(147);
 8000d94:	2093      	movs	r0, #147	; 0x93
 8000d96:	f000 fbb5 	bl	8001504 <setTimer2>
					status = FAULT_CONDITION;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <fsm_manual_run+0x614>)
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	601a      	str	r2, [r3, #0]
				}
				else status = NORMAL;
			}
			break;
 8000da0:	e0a9      	b.n	8000ef6 <fsm_manual_run+0x736>
				else status = NORMAL;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <fsm_manual_run+0x614>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
			break;
 8000da8:	e0a5      	b.n	8000ef6 <fsm_manual_run+0x736>
 8000daa:	bf00      	nop
 8000dac:	20000104 	.word	0x20000104
 8000db0:	20000118 	.word	0x20000118
 8000db4:	20000048 	.word	0x20000048
 8000db8:	68db8bad 	.word	0x68db8bad
 8000dbc:	10624dd3 	.word	0x10624dd3
 8000dc0:	2000010c 	.word	0x2000010c
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	20000114 	.word	0x20000114
 8000dcc:	200000f0 	.word	0x200000f0
 8000dd0:	000182b8 	.word	0x000182b8
 8000dd4:	20000040 	.word	0x20000040
 8000dd8:	2000004c 	.word	0x2000004c
 8000ddc:	200000f4 	.word	0x200000f4
		case FAULT_CONDITION:
			setColor(GPIOA, LED_AMBER_A_Pin, LED_AMBER_B_Pin, LED_AMBER_B_Pin, OFF, OFF, OFF);
 8000de0:	2301      	movs	r3, #1
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	2301      	movs	r3, #1
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2320      	movs	r3, #32
 8000dee:	2220      	movs	r2, #32
 8000df0:	2104      	movs	r1, #4
 8000df2:	4844      	ldr	r0, [pc, #272]	; (8000f04 <fsm_manual_run+0x744>)
 8000df4:	f000 fce8 	bl	80017c8 <setColor>
			setColor(GPIOA, LED_RED_A_Pin, LED_RED_B_Pin, LED_RED_B_Pin, OFF, OFF, OFF);
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	2301      	movs	r3, #1
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2310      	movs	r3, #16
 8000e06:	2210      	movs	r2, #16
 8000e08:	2102      	movs	r1, #2
 8000e0a:	483e      	ldr	r0, [pc, #248]	; (8000f04 <fsm_manual_run+0x744>)
 8000e0c:	f000 fcdc 	bl	80017c8 <setColor>
			setColor(GPIOA, LED_GREEN_A_Pin, LED_GREEN_B_Pin, LED_GREEN_B_Pin, OFF, OFF, OFF);
 8000e10:	2301      	movs	r3, #1
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2340      	movs	r3, #64	; 0x40
 8000e1e:	2240      	movs	r2, #64	; 0x40
 8000e20:	2108      	movs	r1, #8
 8000e22:	4838      	ldr	r0, [pc, #224]	; (8000f04 <fsm_manual_run+0x744>)
 8000e24:	f000 fcd0 	bl	80017c8 <setColor>
			if (timer1_flag == 1 && idx == 0) {
 8000e28:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <fsm_manual_run+0x748>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10c      	bne.n	8000e4a <fsm_manual_run+0x68a>
 8000e30:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <fsm_manual_run+0x74c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d108      	bne.n	8000e4a <fsm_manual_run+0x68a>
				setTimer1(153);
 8000e38:	2099      	movs	r0, #153	; 0x99
 8000e3a:	f000 fb49 	bl	80014d0 <setTimer1>
				display_num('A', 1, 11);
 8000e3e:	220b      	movs	r2, #11
 8000e40:	2101      	movs	r1, #1
 8000e42:	2041      	movs	r0, #65	; 0x41
 8000e44:	f000 f88c 	bl	8000f60 <display_num>
 8000e48:	e00f      	b.n	8000e6a <fsm_manual_run+0x6aa>
			}
			else if (timer1_flag == 1 && idx == 1) {
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <fsm_manual_run+0x748>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d10b      	bne.n	8000e6a <fsm_manual_run+0x6aa>
 8000e52:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <fsm_manual_run+0x74c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d107      	bne.n	8000e6a <fsm_manual_run+0x6aa>
				setTimer1(153);
 8000e5a:	2099      	movs	r0, #153	; 0x99
 8000e5c:	f000 fb38 	bl	80014d0 <setTimer1>
				display_num('A', 2, 12);
 8000e60:	220c      	movs	r2, #12
 8000e62:	2102      	movs	r1, #2
 8000e64:	2041      	movs	r0, #65	; 0x41
 8000e66:	f000 f87b 	bl	8000f60 <display_num>
			}
			if (timer2_flag == 1 && idx == 0) { // B mode, A value
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <fsm_manual_run+0x750>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d10c      	bne.n	8000e8c <fsm_manual_run+0x6cc>
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <fsm_manual_run+0x74c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d108      	bne.n	8000e8c <fsm_manual_run+0x6cc>
				setTimer2(147);
 8000e7a:	2093      	movs	r0, #147	; 0x93
 8000e7c:	f000 fb42 	bl	8001504 <setTimer2>
				display_num('B', 1, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2101      	movs	r1, #1
 8000e84:	2042      	movs	r0, #66	; 0x42
 8000e86:	f000 f86b 	bl	8000f60 <display_num>
 8000e8a:	e00f      	b.n	8000eac <fsm_manual_run+0x6ec>
			}
			else if (timer2_flag == 1 && idx == 1) {
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <fsm_manual_run+0x750>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10b      	bne.n	8000eac <fsm_manual_run+0x6ec>
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <fsm_manual_run+0x74c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d107      	bne.n	8000eac <fsm_manual_run+0x6ec>
				setTimer2(147);
 8000e9c:	2093      	movs	r0, #147	; 0x93
 8000e9e:	f000 fb31 	bl	8001504 <setTimer2>
				display_num('B', 2, FAULT_CONDITION);
 8000ea2:	2205      	movs	r2, #5
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	2042      	movs	r0, #66	; 0x42
 8000ea8:	f000 f85a 	bl	8000f60 <display_num>
			}

			red_duration = red_duration_temp;
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <fsm_manual_run+0x754>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <fsm_manual_run+0x758>)
 8000eb2:	6013      	str	r3, [r2, #0]
			amber_duration = amber_duration_temp;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <fsm_manual_run+0x75c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <fsm_manual_run+0x760>)
 8000eba:	6013      	str	r3, [r2, #0]
			green_duration = green_duration_temp;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <fsm_manual_run+0x764>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <fsm_manual_run+0x768>)
 8000ec2:	6013      	str	r3, [r2, #0]

			if (isButton1Pressed()) status = MODIFY_RED;
 8000ec4:	f7ff f942 	bl	800014c <isButton1Pressed>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <fsm_manual_run+0x714>
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <fsm_manual_run+0x76c>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	601a      	str	r2, [r3, #0]

			if (isButton3Pressed()) status = NORMAL;
 8000ed4:	f7ff fa1a 	bl	800030c <isButton3Pressed>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00d      	beq.n	8000efa <fsm_manual_run+0x73a>
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <fsm_manual_run+0x76c>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
			break;
 8000ee4:	e009      	b.n	8000efa <fsm_manual_run+0x73a>
		default:
			break;
 8000ee6:	bf00      	nop
 8000ee8:	e008      	b.n	8000efc <fsm_manual_run+0x73c>
			break;
 8000eea:	bf00      	nop
 8000eec:	e006      	b.n	8000efc <fsm_manual_run+0x73c>
			break;
 8000eee:	bf00      	nop
 8000ef0:	e004      	b.n	8000efc <fsm_manual_run+0x73c>
			break;
 8000ef2:	bf00      	nop
 8000ef4:	e002      	b.n	8000efc <fsm_manual_run+0x73c>
			break;
 8000ef6:	bf00      	nop
 8000ef8:	e000      	b.n	8000efc <fsm_manual_run+0x73c>
			break;
 8000efa:	bf00      	nop
	}
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40010800 	.word	0x40010800
 8000f08:	20000104 	.word	0x20000104
 8000f0c:	20000118 	.word	0x20000118
 8000f10:	2000010c 	.word	0x2000010c
 8000f14:	200000ec 	.word	0x200000ec
 8000f18:	20000044 	.word	0x20000044
 8000f1c:	200000f0 	.word	0x200000f0
 8000f20:	20000048 	.word	0x20000048
 8000f24:	200000f4 	.word	0x200000f4
 8000f28:	2000004c 	.word	0x2000004c
 8000f2c:	20000040 	.word	0x20000040

08000f30 <isErrorOccured>:
 *  Created on: Oct 28, 2024
 *      Author: datph
 */
#include "fsm_setting.h"

int isErrorOccured() {
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	if ((amber_duration + green_duration) != red_duration) return 1;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <isErrorOccured+0x24>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <isErrorOccured+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	441a      	add	r2, r3
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <isErrorOccured+0x2c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d001      	beq.n	8000f4a <isErrorOccured+0x1a>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <isErrorOccured+0x1c>
	return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000048 	.word	0x20000048
 8000f58:	2000004c 	.word	0x2000004c
 8000f5c:	20000044 	.word	0x20000044

08000f60 <display_num>:
 *  Created on: Oct 28, 2024
 *      Author: datph
 */
#include "led7_segment.h"

void display_num (char group, int index, int num) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	73fb      	strb	r3, [r7, #15]
	if (group == 'A' && index == 1) {
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b41      	cmp	r3, #65	; 0x41
 8000f72:	d112      	bne.n	8000f9a <display_num+0x3a>
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d10f      	bne.n	8000f9a <display_num+0x3a>
		HAL_GPIO_WritePin(GPIOA, ENA1_Pin, ON);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	482b      	ldr	r0, [pc, #172]	; (800102c <display_num+0xcc>)
 8000f80:	f001 fb77 	bl	8002672 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENA2_Pin, OFF);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8a:	4828      	ldr	r0, [pc, #160]	; (800102c <display_num+0xcc>)
 8000f8c:	f001 fb71 	bl	8002672 <HAL_GPIO_WritePin>
		select_num('A', num);
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	2041      	movs	r0, #65	; 0x41
 8000f94:	f000 fc5c 	bl	8001850 <select_num>
 8000f98:	e043      	b.n	8001022 <display_num+0xc2>
	}
	else if (group == 'A' && index == 2) {
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b41      	cmp	r3, #65	; 0x41
 8000f9e:	d112      	bne.n	8000fc6 <display_num+0x66>
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d10f      	bne.n	8000fc6 <display_num+0x66>
		HAL_GPIO_WritePin(GPIOA, ENA2_Pin, ON);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fac:	481f      	ldr	r0, [pc, #124]	; (800102c <display_num+0xcc>)
 8000fae:	f001 fb60 	bl	8002672 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENA1_Pin, OFF);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	481d      	ldr	r0, [pc, #116]	; (800102c <display_num+0xcc>)
 8000fb8:	f001 fb5b 	bl	8002672 <HAL_GPIO_WritePin>
		select_num('A', num);
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	2041      	movs	r0, #65	; 0x41
 8000fc0:	f000 fc46 	bl	8001850 <select_num>
 8000fc4:	e02d      	b.n	8001022 <display_num+0xc2>
	}
	else if (group == 'B' && index == 1) {
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	2b42      	cmp	r3, #66	; 0x42
 8000fca:	d113      	bne.n	8000ff4 <display_num+0x94>
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d110      	bne.n	8000ff4 <display_num+0x94>
		HAL_GPIO_WritePin(GPIOA, ENB1_Pin, ON);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd8:	4814      	ldr	r0, [pc, #80]	; (800102c <display_num+0xcc>)
 8000fda:	f001 fb4a 	bl	8002672 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENB2_Pin, OFF);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe4:	4811      	ldr	r0, [pc, #68]	; (800102c <display_num+0xcc>)
 8000fe6:	f001 fb44 	bl	8002672 <HAL_GPIO_WritePin>
		select_num('B', num);
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	2042      	movs	r0, #66	; 0x42
 8000fee:	f000 fc2f 	bl	8001850 <select_num>
 8000ff2:	e016      	b.n	8001022 <display_num+0xc2>
	}
	else if (group == 'B' && index == 2) {
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b42      	cmp	r3, #66	; 0x42
 8000ff8:	d113      	bne.n	8001022 <display_num+0xc2>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d110      	bne.n	8001022 <display_num+0xc2>
		HAL_GPIO_WritePin(GPIOA, ENB2_Pin, ON);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	4809      	ldr	r0, [pc, #36]	; (800102c <display_num+0xcc>)
 8001008:	f001 fb33 	bl	8002672 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ENB1_Pin, OFF);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <display_num+0xcc>)
 8001014:	f001 fb2d 	bl	8002672 <HAL_GPIO_WritePin>
		select_num('B', num);
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	2042      	movs	r0, #66	; 0x42
 800101c:	f000 fc18 	bl	8001850 <select_num>
	}
}
 8001020:	e7ff      	b.n	8001022 <display_num+0xc2>
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40010800 	.word	0x40010800

08001030 <display_time>:

void display_time() {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	if (timer2_flag == 1 && idx == 0) {
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <display_time+0x88>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d116      	bne.n	800106a <display_time+0x3a>
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <display_time+0x8c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d112      	bne.n	800106a <display_time+0x3a>
		setTimer2(150);
 8001044:	2096      	movs	r0, #150	; 0x96
 8001046:	f000 fa5d 	bl	8001504 <setTimer2>
		display_num('A', 1, (timer1_counter + 100)/1000);
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <display_time+0x90>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3364      	adds	r3, #100	; 0x64
 8001050:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <display_time+0x94>)
 8001052:	fb82 1203 	smull	r1, r2, r2, r3
 8001056:	1192      	asrs	r2, r2, #6
 8001058:	17db      	asrs	r3, r3, #31
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	461a      	mov	r2, r3
 800105e:	2101      	movs	r1, #1
 8001060:	2041      	movs	r0, #65	; 0x41
 8001062:	f7ff ff7d 	bl	8000f60 <display_num>
	if (timer2_flag == 1 && idx == 0) {
 8001066:	bf00      	nop
	}
	else if (timer2_flag == 1 && idx == 1) {
		setTimer2(150);
		display_num('A', 2, ((timer1_counter + 100)%1000)/100);
	}
}
 8001068:	e024      	b.n	80010b4 <display_time+0x84>
	else if (timer2_flag == 1 && idx == 1) {
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <display_time+0x88>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d120      	bne.n	80010b4 <display_time+0x84>
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <display_time+0x8c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d11c      	bne.n	80010b4 <display_time+0x84>
		setTimer2(150);
 800107a:	2096      	movs	r0, #150	; 0x96
 800107c:	f000 fa42 	bl	8001504 <setTimer2>
		display_num('A', 2, ((timer1_counter + 100)%1000)/100);
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <display_time+0x90>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <display_time+0x94>)
 800108a:	fb83 1302 	smull	r1, r3, r3, r2
 800108e:	1199      	asrs	r1, r3, #6
 8001090:	17d3      	asrs	r3, r2, #31
 8001092:	1acb      	subs	r3, r1, r3
 8001094:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001098:	fb01 f303 	mul.w	r3, r1, r3
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <display_time+0x98>)
 80010a0:	fb82 1203 	smull	r1, r2, r2, r3
 80010a4:	1152      	asrs	r2, r2, #5
 80010a6:	17db      	asrs	r3, r3, #31
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	2102      	movs	r1, #2
 80010ae:	2041      	movs	r0, #65	; 0x41
 80010b0:	f7ff ff56 	bl	8000f60 <display_num>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000010c 	.word	0x2000010c
 80010bc:	20000118 	.word	0x20000118
 80010c0:	20000100 	.word	0x20000100
 80010c4:	10624dd3 	.word	0x10624dd3
 80010c8:	51eb851f 	.word	0x51eb851f

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f000 ffce 	bl	8002070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 f816 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f000 f89c 	bl	8001214 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010dc:	f000 f84e 	bl	800117c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <main+0x30>)
 80010e2:	f001 ff23 	bl	8002f2c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80010e6:	f000 f91f 	bl	8001328 <SCH_Init>
//  SCH_Add_Task(LED_RED_test, 0, 100);
//  SCH_Add_Task(LED_GREEN_test, 0, 300);
//  SCH_Add_Task(LED_YELLOW_test, 0, 100);
//  SCH_Add_Task(LED_PURPLE_test, 0, 400);
//  SCH_Add_Task(LED_PINK_test, 50, 300);
  	SCH_Add_Task(fsm_manual_run, 0, 25);
 80010ea:	2219      	movs	r2, #25
 80010ec:	2100      	movs	r1, #0
 80010ee:	4804      	ldr	r0, [pc, #16]	; (8001100 <main+0x34>)
 80010f0:	f000 f92a 	bl	8001348 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80010f4:	f000 f98a 	bl	800140c <SCH_Dispatch_Tasks>
 80010f8:	e7fc      	b.n	80010f4 <main+0x28>
 80010fa:	bf00      	nop
 80010fc:	20000128 	.word	0x20000128
 8001100:	080007c1 	.word	0x080007c1

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b090      	sub	sp, #64	; 0x40
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	2228      	movs	r2, #40	; 0x28
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fad0 	bl	80036b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112a:	2301      	movs	r3, #1
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112e:	2310      	movs	r3, #16
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	4618      	mov	r0, r3
 800113c:	f001 faca 	bl	80026d4 <HAL_RCC_OscConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001146:	f000 f8e9 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fd36 	bl	8002bd4 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800116e:	f000 f8d5 	bl	800131c <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3740      	adds	r7, #64	; 0x40
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_TIM2_Init+0x94>)
 800119a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_TIM2_Init+0x94>)
 80011a2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_TIM2_Init+0x94>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_TIM2_Init+0x94>)
 80011b0:	2209      	movs	r2, #9
 80011b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_TIM2_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_TIM2_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <MX_TIM2_Init+0x94>)
 80011c2:	f001 fe63 	bl	8002e8c <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011cc:	f000 f8a6 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4619      	mov	r1, r3
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_TIM2_Init+0x94>)
 80011de:	f001 ffe1 	bl	80031a4 <HAL_TIM_ConfigClockSource>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011e8:	f000 f898 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_TIM2_Init+0x94>)
 80011fa:	f002 f9b9 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001204:	f000 f88a 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000128 	.word	0x20000128

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <MX_GPIO_Init+0xd4>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a2e      	ldr	r2, [pc, #184]	; (80012e8 <MX_GPIO_Init+0xd4>)
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <MX_GPIO_Init+0xd4>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_GPIO_Init+0xd4>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a28      	ldr	r2, [pc, #160]	; (80012e8 <MX_GPIO_Init+0xd4>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_GPIO_Init+0xd4>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_GPIO_Init+0xd4>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <MX_GPIO_Init+0xd4>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_GPIO_Init+0xd4>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_A_Pin|LED_AMBER_A_Pin|LED_GREEN_A_Pin|LED_RED_B_Pin
 8001270:	2200      	movs	r2, #0
 8001272:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001276:	481d      	ldr	r0, [pc, #116]	; (80012ec <MX_GPIO_Init+0xd8>)
 8001278:	f001 f9fb 	bl	8002672 <HAL_GPIO_WritePin>
                          |LED_AMBER_B_Pin|LED_GREEN_B_Pin|ENA1_Pin|ENA2_Pin
                          |ENB1_Pin|ENB2_Pin|LED_RED_Pin|LED_GREEN_Pin
                          |LED_YELLOW_Pin|LED_PURPLE_Pin|LED_PINK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_3_Pin
 800127c:	2200      	movs	r2, #0
 800127e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001282:	481b      	ldr	r0, [pc, #108]	; (80012f0 <MX_GPIO_Init+0xdc>)
 8001284:	f001 f9f5 	bl	8002672 <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_0_Pin
                          |SEG_1_Pin|SEG_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001288:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800128c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4815      	ldr	r0, [pc, #84]	; (80012f4 <MX_GPIO_Init+0xe0>)
 800129e:	f001 f857 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_A_Pin LED_AMBER_A_Pin LED_GREEN_A_Pin LED_RED_B_Pin
                           LED_AMBER_B_Pin LED_GREEN_B_Pin ENA1_Pin ENA2_Pin
                           ENB1_Pin ENB2_Pin LED_RED_Pin LED_GREEN_Pin
                           LED_YELLOW_Pin LED_PURPLE_Pin LED_PINK_Pin */
  GPIO_InitStruct.Pin = LED_RED_A_Pin|LED_AMBER_A_Pin|LED_GREEN_A_Pin|LED_RED_B_Pin
 80012a2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80012a6:	613b      	str	r3, [r7, #16]
                          |LED_AMBER_B_Pin|LED_GREEN_B_Pin|ENA1_Pin|ENA2_Pin
                          |ENB1_Pin|ENB2_Pin|LED_RED_Pin|LED_GREEN_Pin
                          |LED_YELLOW_Pin|LED_PURPLE_Pin|LED_PINK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	480c      	ldr	r0, [pc, #48]	; (80012ec <MX_GPIO_Init+0xd8>)
 80012bc:	f001 f848 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_0_Pin
                           SEG_1_Pin SEG_2_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_3_Pin
 80012c0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80012c4:	613b      	str	r3, [r7, #16]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_0_Pin
                          |SEG_1_Pin|SEG_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_GPIO_Init+0xdc>)
 80012da:	f001 f839 	bl	8002350 <HAL_GPIO_Init>

}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010800 	.word	0x40010800
 80012f0:	40010c00 	.word	0x40010c00
 80012f4:	40011000 	.word	0x40011000

080012f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001300:	f000 f85a 	bl	80013b8 <SCH_Update>
	timerRun();
 8001304:	f000 f950 	bl	80015a8 <timerRun>
	getKeyInputButton1();
 8001308:	f7fe ff3e 	bl	8000188 <getKeyInputButton1>
	getKeyInputButton2();
 800130c:	f7fe ffac 	bl	8000268 <getKeyInputButton2>
	getKeyInputButton3();
 8001310:	f7ff f81a 	bl	8000348 <getKeyInputButton3>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	e7fe      	b.n	8001324 <Error_Handler+0x8>
	...

08001328 <SCH_Init>:
//}
// ----------- O(1)
sTasks* head = NULL;
sTasks* tail = NULL;

void SCH_Init(void) {
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
    head = NULL;
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SCH_Init+0x18>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
    tail = NULL;
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SCH_Init+0x1c>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	200000f8 	.word	0x200000f8
 8001344:	200000fc 	.word	0x200000fc

08001348 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
    sTasks* newTask = (sTasks*)malloc(sizeof(sTasks));
 8001354:	201c      	movs	r0, #28
 8001356:	f002 f99f 	bl	8003698 <malloc>
 800135a:	4603      	mov	r3, r0
 800135c:	617b      	str	r3, [r7, #20]
    if (newTask) {
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d021      	beq.n	80013a8 <SCH_Add_Task+0x60>
        newTask->pTask = pFunction;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	601a      	str	r2, [r3, #0]
        newTask->Delay = DELAY;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	605a      	str	r2, [r3, #4]
        newTask->Period = PERIOD;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	609a      	str	r2, [r3, #8]
        newTask->RunMe = 0;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2200      	movs	r2, #0
 800137a:	731a      	strb	r2, [r3, #12]
        newTask->next = NULL;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
        newTask->prev = tail;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <SCH_Add_Task+0x68>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	619a      	str	r2, [r3, #24]

        if (tail) {
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <SCH_Add_Task+0x68>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <SCH_Add_Task+0x54>
            tail->next = newTask;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <SCH_Add_Task+0x68>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	e002      	b.n	80013a2 <SCH_Add_Task+0x5a>
        } else {
            head = newTask;
 800139c:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <SCH_Add_Task+0x6c>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	6013      	str	r3, [r2, #0]
        }
        tail = newTask;
 80013a2:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <SCH_Add_Task+0x68>)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	6013      	str	r3, [r2, #0]
    }
}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200000fc 	.word	0x200000fc
 80013b4:	200000f8 	.word	0x200000f8

080013b8 <SCH_Update>:

void SCH_Update(void) {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
    sTasks* current = head;
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <SCH_Update+0x50>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	607b      	str	r3, [r7, #4]
    while (current) {
 80013c4:	e016      	b.n	80013f4 <SCH_Update+0x3c>
        if (current->Delay > 0) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <SCH_Update+0x22>
            current->Delay--;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	e009      	b.n	80013ee <SCH_Update+0x36>
        } else {
            current->Delay = current->Period;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	605a      	str	r2, [r3, #4]
            current->RunMe++;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7b1b      	ldrb	r3, [r3, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	731a      	strb	r2, [r3, #12]
        }
        current = current->next;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	607b      	str	r3, [r7, #4]
    while (current) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1e5      	bne.n	80013c6 <SCH_Update+0xe>
    }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	200000f8 	.word	0x200000f8

0800140c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
    sTasks* current = head;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <SCH_Dispatch_Tasks+0x60>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	607b      	str	r3, [r7, #4]
    while (current) {
 8001418:	e020      	b.n	800145c <SCH_Dispatch_Tasks+0x50>
        if (current->RunMe > 0) {
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7b1b      	ldrb	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d019      	beq.n	8001456 <SCH_Dispatch_Tasks+0x4a>
            current->RunMe--;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7b1b      	ldrb	r3, [r3, #12]
 8001426:	3b01      	subs	r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	731a      	strb	r2, [r3, #12]
            (*current->pTask)();
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4798      	blx	r3

            if (current->Period == 0) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d108      	bne.n	800144e <SCH_Dispatch_Tasks+0x42>
                sTasks* toDelete = current;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	603b      	str	r3, [r7, #0]
                current = current->next;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	607b      	str	r3, [r7, #4]
                SCH_Delete_Task(toDelete);
 8001446:	6838      	ldr	r0, [r7, #0]
 8001448:	f000 f812 	bl	8001470 <SCH_Delete_Task>
 800144c:	e006      	b.n	800145c <SCH_Dispatch_Tasks+0x50>
            } else {
                current = current->next;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	e002      	b.n	800145c <SCH_Dispatch_Tasks+0x50>
            }
        } else {
            current = current->next;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	607b      	str	r3, [r7, #4]
    while (current) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1db      	bne.n	800141a <SCH_Dispatch_Tasks+0xe>
        }
    }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200000f8 	.word	0x200000f8

08001470 <SCH_Delete_Task>:

void SCH_Delete_Task(sTasks* task) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    if (!task) return;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01f      	beq.n	80014be <SCH_Delete_Task+0x4e>

    if (task->prev) {
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <SCH_Delete_Task+0x22>
        task->prev->next = task->next;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6952      	ldr	r2, [r2, #20]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	e003      	b.n	800149a <SCH_Delete_Task+0x2a>
    } else {
        head = task->next;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <SCH_Delete_Task+0x58>)
 8001498:	6013      	str	r3, [r2, #0]
    }

    if (task->next) {
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <SCH_Delete_Task+0x3e>
        task->next->prev = task->prev;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6992      	ldr	r2, [r2, #24]
 80014aa:	619a      	str	r2, [r3, #24]
 80014ac:	e003      	b.n	80014b6 <SCH_Delete_Task+0x46>
    } else {
        tail = task->prev;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a06      	ldr	r2, [pc, #24]	; (80014cc <SCH_Delete_Task+0x5c>)
 80014b4:	6013      	str	r3, [r2, #0]
    }

    free(task);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f002 f8f6 	bl	80036a8 <free>
 80014bc:	e000      	b.n	80014c0 <SCH_Delete_Task+0x50>
    if (!task) return;
 80014be:	bf00      	nop
}
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000f8 	.word	0x200000f8
 80014cc:	200000fc 	.word	0x200000fc

080014d0 <setTimer1>:
int timer3_flag = 0;

int idx = 0;
int TICK = 10;

void setTimer1 (int duration) {
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <setTimer1+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	fb92 f3f3 	sdiv	r3, r2, r3
 80014e2:	4a06      	ldr	r2, [pc, #24]	; (80014fc <setTimer1+0x2c>)
 80014e4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <setTimer1+0x30>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000050 	.word	0x20000050
 80014fc:	20000100 	.word	0x20000100
 8001500:	20000104 	.word	0x20000104

08001504 <setTimer2>:

void setTimer2 (int duration) {
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <setTimer2+0x28>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	fb92 f3f3 	sdiv	r3, r2, r3
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <setTimer2+0x2c>)
 8001518:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <setTimer2+0x30>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000050 	.word	0x20000050
 8001530:	20000108 	.word	0x20000108
 8001534:	2000010c 	.word	0x2000010c

08001538 <setTimer3>:

void setTimer3 (int duration) {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <setTimer3+0x28>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	fb92 f3f3 	sdiv	r3, r2, r3
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <setTimer3+0x2c>)
 800154c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <setTimer3+0x30>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000050 	.word	0x20000050
 8001564:	20000110 	.word	0x20000110
 8001568:	20000114 	.word	0x20000114

0800156c <isTimer1Paused>:

int isTimer1Paused(int pause) {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	pause = pause / 10;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <isTimer1Paused+0x34>)
 8001578:	fb82 1203 	smull	r1, r2, r2, r3
 800157c:	1092      	asrs	r2, r2, #2
 800157e:	17db      	asrs	r3, r3, #31
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	607b      	str	r3, [r7, #4]
	if (timer1_counter <= pause) return 1;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <isTimer1Paused+0x38>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	db01      	blt.n	8001592 <isTimer1Paused+0x26>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <isTimer1Paused+0x28>
	return 0;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	66666667 	.word	0x66666667
 80015a4:	20000100 	.word	0x20000100

080015a8 <timerRun>:

void timerRun() {
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) --timer1_counter;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <timerRun+0x7c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	dd05      	ble.n	80015c0 <timerRun+0x18>
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <timerRun+0x7c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <timerRun+0x7c>)
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e002      	b.n	80015c6 <timerRun+0x1e>
	else timer1_flag = 1;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <timerRun+0x80>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

	if (timer2_counter > 0) --timer2_counter;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <timerRun+0x84>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	dd05      	ble.n	80015da <timerRun+0x32>
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <timerRun+0x84>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	4a15      	ldr	r2, [pc, #84]	; (800162c <timerRun+0x84>)
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e013      	b.n	8001602 <timerRun+0x5a>
	else {
		timer2_flag = 1;
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <timerRun+0x88>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]
		switch (idx) {
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <timerRun+0x8c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <timerRun+0x46>
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d006      	beq.n	80015fa <timerRun+0x52>
				break;
			case 1:
				idx = 0;
				break;
			default:
				break;
 80015ec:	e009      	b.n	8001602 <timerRun+0x5a>
				++idx;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <timerRun+0x8c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <timerRun+0x8c>)
 80015f6:	6013      	str	r3, [r2, #0]
				break;
 80015f8:	e003      	b.n	8001602 <timerRun+0x5a>
				idx = 0;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <timerRun+0x8c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
				break;
 8001600:	bf00      	nop
		}
	}

	if (timer3_counter > 0) --timer3_counter;
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <timerRun+0x90>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	dd05      	ble.n	8001616 <timerRun+0x6e>
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <timerRun+0x90>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	4a09      	ldr	r2, [pc, #36]	; (8001638 <timerRun+0x90>)
 8001612:	6013      	str	r3, [r2, #0]
	else timer3_flag = 1;
}
 8001614:	e002      	b.n	800161c <timerRun+0x74>
	else timer3_flag = 1;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <timerRun+0x94>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	20000100 	.word	0x20000100
 8001628:	20000104 	.word	0x20000104
 800162c:	20000108 	.word	0x20000108
 8001630:	2000010c 	.word	0x2000010c
 8001634:	20000118 	.word	0x20000118
 8001638:	20000110 	.word	0x20000110
 800163c:	20000114 	.word	0x20000114

08001640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_MspInit+0x5c>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4a14      	ldr	r2, [pc, #80]	; (800169c <HAL_MspInit+0x5c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6193      	str	r3, [r2, #24]
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_MspInit+0x5c>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_MspInit+0x5c>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_MspInit+0x5c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_MspInit+0x5c>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_MspInit+0x60>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <HAL_MspInit+0x60>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000

080016a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b4:	d113      	bne.n	80016de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_TIM_Base_MspInit+0x44>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_TIM_Base_MspInit+0x44>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_TIM_Base_MspInit+0x44>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	201c      	movs	r0, #28
 80016d4:	f000 fe05 	bl	80022e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d8:	201c      	movs	r0, #28
 80016da:	f000 fe1e 	bl	800231a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001732:	f000 fce3 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <TIM2_IRQHandler+0x10>)
 8001742:	f001 fc3f 	bl	8002fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000128 	.word	0x20000128

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f001 ff60 	bl	8003644 <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20002800 	.word	0x20002800
 80017b0:	00000400 	.word	0x00000400
 80017b4:	2000011c 	.word	0x2000011c
 80017b8:	20000188 	.word	0x20000188

080017bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <setColor>:
 *  Created on: Oct 28, 2024
 *      Author: datph
 */
#include "traffic_light.h"

void setColor(GPIO_TypeDef *GPIOx, uint16_t Led_1, uint16_t Led_2, uint16_t Led_3, GPIO_PinState Led_1_State, GPIO_PinState Led_2_State, GPIO_PinState Led_3_State) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	817b      	strh	r3, [r7, #10]
 80017da:	460b      	mov	r3, r1
 80017dc:	813b      	strh	r3, [r7, #8]
 80017de:	4613      	mov	r3, r2
 80017e0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOx, Led_1, Led_1_State);
 80017e2:	7e3a      	ldrb	r2, [r7, #24]
 80017e4:	897b      	ldrh	r3, [r7, #10]
 80017e6:	4619      	mov	r1, r3
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 ff42 	bl	8002672 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, Led_2, Led_2_State);
 80017ee:	7f3a      	ldrb	r2, [r7, #28]
 80017f0:	893b      	ldrh	r3, [r7, #8]
 80017f2:	4619      	mov	r1, r3
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 ff3c 	bl	8002672 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, Led_3, Led_3_State);
 80017fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	4619      	mov	r1, r3
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 ff35 	bl	8002672 <HAL_GPIO_WritePin>
}
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <setColorToggle>:

void setColorToggle(GPIO_TypeDef *GPIOx, uint16_t Led_1, uint16_t Led_2, uint16_t Led_3) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	4608      	mov	r0, r1
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	4603      	mov	r3, r0
 8001820:	817b      	strh	r3, [r7, #10]
 8001822:	460b      	mov	r3, r1
 8001824:	813b      	strh	r3, [r7, #8]
 8001826:	4613      	mov	r3, r2
 8001828:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOx, Led_1);
 800182a:	897b      	ldrh	r3, [r7, #10]
 800182c:	4619      	mov	r1, r3
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 ff37 	bl	80026a2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOx, Led_2);
 8001834:	893b      	ldrh	r3, [r7, #8]
 8001836:	4619      	mov	r1, r3
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 ff32 	bl	80026a2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOx, Led_3);
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	4619      	mov	r1, r3
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 ff2d 	bl	80026a2 <HAL_GPIO_TogglePin>
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <select_num>:

void select_num (char group, int num) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af04      	add	r7, sp, #16
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
if (group == 'A') {
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	2b41      	cmp	r3, #65	; 0x41
 8001860:	f040 8241 	bne.w	8001ce6 <select_num+0x496>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b0c      	cmp	r3, #12
 8001868:	f200 83d0 	bhi.w	800200c <select_num+0x7bc>
 800186c:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <select_num+0x24>)
 800186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	080018a9 	.word	0x080018a9
 8001878:	08001903 	.word	0x08001903
 800187c:	0800195d 	.word	0x0800195d
 8001880:	080019b7 	.word	0x080019b7
 8001884:	08001a11 	.word	0x08001a11
 8001888:	08001a6b 	.word	0x08001a6b
 800188c:	08001ac5 	.word	0x08001ac5
 8001890:	08001b1f 	.word	0x08001b1f
 8001894:	08001b79 	.word	0x08001b79
 8001898:	08001bd9 	.word	0x08001bd9
 800189c:	0800200d 	.word	0x0800200d
 80018a0:	08001c33 	.word	0x08001c33
 80018a4:	08001c8d 	.word	0x08001c8d
	switch (num) {
		case 0:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 80018a8:	2300      	movs	r3, #0
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	2300      	movs	r3, #0
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	2300      	movs	r3, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	48c5      	ldr	r0, [pc, #788]	; (8001bd4 <select_num+0x384>)
 80018c0:	f7ff ff82 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 80018c4:	2300      	movs	r3, #0
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	2300      	movs	r3, #0
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	2300      	movs	r3, #0
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018dc:	48bd      	ldr	r0, [pc, #756]	; (8001bd4 <select_num+0x384>)
 80018de:	f7ff ff73 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, OFF);
 80018e2:	2301      	movs	r3, #1
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	2300      	movs	r3, #0
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	2300      	movs	r3, #0
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018fa:	48b6      	ldr	r0, [pc, #728]	; (8001bd4 <select_num+0x384>)
 80018fc:	f7ff ff64 	bl	80017c8 <setColor>
			break;
 8001900:	e389      	b.n	8002016 <select_num+0x7c6>
		case 1:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, OFF, ON, ON);
 8001902:	2300      	movs	r3, #0
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	2300      	movs	r3, #0
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	2301      	movs	r3, #1
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	48ae      	ldr	r0, [pc, #696]	; (8001bd4 <select_num+0x384>)
 800191a:	f7ff ff55 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, OFF);
 800191e:	2301      	movs	r3, #1
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	2301      	movs	r3, #1
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2301      	movs	r3, #1
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001936:	48a7      	ldr	r0, [pc, #668]	; (8001bd4 <select_num+0x384>)
 8001938:	f7ff ff46 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, OFF, OFF);
 800193c:	2301      	movs	r3, #1
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	2301      	movs	r3, #1
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2301      	movs	r3, #1
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001954:	489f      	ldr	r0, [pc, #636]	; (8001bd4 <select_num+0x384>)
 8001956:	f7ff ff37 	bl	80017c8 <setColor>
			break;
 800195a:	e35c      	b.n	8002016 <select_num+0x7c6>
		case 2:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, OFF);
 800195c:	2301      	movs	r3, #1
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	2300      	movs	r3, #0
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2300      	movs	r3, #0
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	4898      	ldr	r0, [pc, #608]	; (8001bd4 <select_num+0x384>)
 8001974:	f7ff ff28 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, OFF);
 8001978:	2301      	movs	r3, #1
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	2300      	movs	r3, #0
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800198c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001990:	4890      	ldr	r0, [pc, #576]	; (8001bd4 <select_num+0x384>)
 8001992:	f7ff ff19 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, OFF, ON);
 8001996:	2300      	movs	r3, #0
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	2301      	movs	r3, #1
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	2300      	movs	r3, #0
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ae:	4889      	ldr	r0, [pc, #548]	; (8001bd4 <select_num+0x384>)
 80019b0:	f7ff ff0a 	bl	80017c8 <setColor>
			break;
 80019b4:	e32f      	b.n	8002016 <select_num+0x7c6>
		case 3:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 80019b6:	2300      	movs	r3, #0
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	2300      	movs	r3, #0
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	2300      	movs	r3, #0
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ca:	2180      	movs	r1, #128	; 0x80
 80019cc:	4881      	ldr	r0, [pc, #516]	; (8001bd4 <select_num+0x384>)
 80019ce:	f7ff fefb 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, OFF, OFF);
 80019d2:	2301      	movs	r3, #1
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	2301      	movs	r3, #1
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	2300      	movs	r3, #0
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ea:	487a      	ldr	r0, [pc, #488]	; (8001bd4 <select_num+0x384>)
 80019ec:	f7ff feec 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, OFF, ON);
 80019f0:	2300      	movs	r3, #0
 80019f2:	9302      	str	r3, [sp, #8]
 80019f4:	2301      	movs	r3, #1
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	2301      	movs	r3, #1
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a08:	4872      	ldr	r0, [pc, #456]	; (8001bd4 <select_num+0x384>)
 8001a0a:	f7ff fedd 	bl	80017c8 <setColor>
			break;
 8001a0e:	e302      	b.n	8002016 <select_num+0x7c6>
		case 4:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, OFF, ON, ON);
 8001a10:	2300      	movs	r3, #0
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2300      	movs	r3, #0
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	486b      	ldr	r0, [pc, #428]	; (8001bd4 <select_num+0x384>)
 8001a28:	f7ff fece 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, ON);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	2301      	movs	r3, #1
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2301      	movs	r3, #1
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a44:	4863      	ldr	r0, [pc, #396]	; (8001bd4 <select_num+0x384>)
 8001a46:	f7ff febf 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, ON, ON);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2301      	movs	r3, #1
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a62:	485c      	ldr	r0, [pc, #368]	; (8001bd4 <select_num+0x384>)
 8001a64:	f7ff feb0 	bl	80017c8 <setColor>
			break;
 8001a68:	e2d5      	b.n	8002016 <select_num+0x7c6>
		case 5:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, ON);
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	2300      	movs	r3, #0
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	4854      	ldr	r0, [pc, #336]	; (8001bd4 <select_num+0x384>)
 8001a82:	f7ff fea1 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, OFF, ON);
 8001a86:	2300      	movs	r3, #0
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a9e:	484d      	ldr	r0, [pc, #308]	; (8001bd4 <select_num+0x384>)
 8001aa0:	f7ff fe92 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, ON, ON);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	2301      	movs	r3, #1
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ab8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001abc:	4845      	ldr	r0, [pc, #276]	; (8001bd4 <select_num+0x384>)
 8001abe:	f7ff fe83 	bl	80017c8 <setColor>
			break;
 8001ac2:	e2a8      	b.n	8002016 <select_num+0x7c6>
		case 6:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, ON);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2300      	movs	r3, #0
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	483e      	ldr	r0, [pc, #248]	; (8001bd4 <select_num+0x384>)
 8001adc:	f7ff fe74 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af8:	4836      	ldr	r0, [pc, #216]	; (8001bd4 <select_num+0x384>)
 8001afa:	f7ff fe65 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, ON);
 8001afe:	2300      	movs	r3, #0
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2300      	movs	r3, #0
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b16:	482f      	ldr	r0, [pc, #188]	; (8001bd4 <select_num+0x384>)
 8001b18:	f7ff fe56 	bl	80017c8 <setColor>
			break;
 8001b1c:	e27b      	b.n	8002016 <select_num+0x7c6>
		case 7:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	2300      	movs	r3, #0
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	2300      	movs	r3, #0
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	4827      	ldr	r0, [pc, #156]	; (8001bd4 <select_num+0x384>)
 8001b36:	f7ff fe47 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, OFF, OFF);
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	2301      	movs	r3, #1
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2301      	movs	r3, #1
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b52:	4820      	ldr	r0, [pc, #128]	; (8001bd4 <select_num+0x384>)
 8001b54:	f7ff fe38 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, OFF, OFF);
 8001b58:	2301      	movs	r3, #1
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2301      	movs	r3, #1
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b70:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <select_num+0x384>)
 8001b72:	f7ff fe29 	bl	80017c8 <setColor>
			break;
 8001b76:	e24e      	b.n	8002016 <select_num+0x7c6>
		case 8:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	4811      	ldr	r0, [pc, #68]	; (8001bd4 <select_num+0x384>)
 8001b90:	f7ff fe1a 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 8001b94:	2300      	movs	r3, #0
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ba8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <select_num+0x384>)
 8001bae:	f7ff fe0b 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, ON);
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	9302      	str	r3, [sp, #8]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bca:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <select_num+0x384>)
 8001bcc:	f7ff fdfc 	bl	80017c8 <setColor>
			break;
 8001bd0:	e221      	b.n	8002016 <select_num+0x7c6>
 8001bd2:	bf00      	nop
 8001bd4:	40010c00 	.word	0x40010c00
		case 9:
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, ON, ON);
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	48bc      	ldr	r0, [pc, #752]	; (8001ee0 <select_num+0x690>)
 8001bf0:	f7ff fdea 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, OFF, ON);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c0c:	48b4      	ldr	r0, [pc, #720]	; (8001ee0 <select_num+0x690>)
 8001c0e:	f7ff fddb 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, OFF, ON, ON);
 8001c12:	2300      	movs	r3, #0
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2300      	movs	r3, #0
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c2a:	48ad      	ldr	r0, [pc, #692]	; (8001ee0 <select_num+0x690>)
 8001c2c:	f7ff fdcc 	bl	80017c8 <setColor>
			break;
 8001c30:	e1f1      	b.n	8002016 <select_num+0x7c6>
		case 11: //F
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, OFF);
 8001c32:	2301      	movs	r3, #1
 8001c34:	9302      	str	r3, [sp, #8]
 8001c36:	2301      	movs	r3, #1
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	48a5      	ldr	r0, [pc, #660]	; (8001ee0 <select_num+0x690>)
 8001c4a:	f7ff fdbd 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, OFF, ON, ON);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	2300      	movs	r3, #0
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	2301      	movs	r3, #1
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c66:	489e      	ldr	r0, [pc, #632]	; (8001ee0 <select_num+0x690>)
 8001c68:	f7ff fdae 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, ON);
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c84:	4896      	ldr	r0, [pc, #600]	; (8001ee0 <select_num+0x690>)
 8001c86:	f7ff fd9f 	bl	80017c8 <setColor>
			break;
 8001c8a:	e1c4      	b.n	8002016 <select_num+0x7c6>
		case 12: //C
			setColor(GPIOB, SEG_0_Pin, SEG_1_Pin, SEG_2_Pin, ON, OFF, OFF);
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	2301      	movs	r3, #1
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	488f      	ldr	r0, [pc, #572]	; (8001ee0 <select_num+0x690>)
 8001ca4:	f7ff fd90 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_3_Pin, SEG_4_Pin, SEG_5_Pin, ON, ON, ON);
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc0:	4887      	ldr	r0, [pc, #540]	; (8001ee0 <select_num+0x690>)
 8001cc2:	f7ff fd81 	bl	80017c8 <setColor>
			setColor(GPIOB, SEG_4_Pin, SEG_5_Pin, SEG_6_Pin, ON, ON, OFF);
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cde:	4880      	ldr	r0, [pc, #512]	; (8001ee0 <select_num+0x690>)
 8001ce0:	f7ff fd72 	bl	80017c8 <setColor>
			break;
 8001ce4:	e197      	b.n	8002016 <select_num+0x7c6>
		default:
			break;
	}
}
else if (group == 'B'){
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	2b42      	cmp	r3, #66	; 0x42
 8001cea:	f040 8191 	bne.w	8002010 <select_num+0x7c0>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	f200 818f 	bhi.w	8002014 <select_num+0x7c4>
 8001cf6:	a201      	add	r2, pc, #4	; (adr r2, 8001cfc <select_num+0x4ac>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d25 	.word	0x08001d25
 8001d00:	08001d6f 	.word	0x08001d6f
 8001d04:	08001db9 	.word	0x08001db9
 8001d08:	08001e03 	.word	0x08001e03
 8001d0c:	08001e4d 	.word	0x08001e4d
 8001d10:	08001e97 	.word	0x08001e97
 8001d14:	08001ee5 	.word	0x08001ee5
 8001d18:	08001f2f 	.word	0x08001f2f
 8001d1c:	08001f79 	.word	0x08001f79
 8001d20:	08001fc3 	.word	0x08001fc3
	switch (num) {
			case 0:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8001d24:	2300      	movs	r3, #0
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2304      	movs	r3, #4
 8001d32:	2202      	movs	r2, #2
 8001d34:	2101      	movs	r1, #1
 8001d36:	486a      	ldr	r0, [pc, #424]	; (8001ee0 <select_num+0x690>)
 8001d38:	f7ff fd46 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, ON);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2300      	movs	r3, #0
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2320      	movs	r3, #32
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	2108      	movs	r1, #8
 8001d4e:	4864      	ldr	r0, [pc, #400]	; (8001ee0 <select_num+0x690>)
 8001d50:	f7ff fd3a 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, ON, OFF);
 8001d54:	2301      	movs	r3, #1
 8001d56:	9302      	str	r3, [sp, #8]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2340      	movs	r3, #64	; 0x40
 8001d62:	2220      	movs	r2, #32
 8001d64:	2110      	movs	r1, #16
 8001d66:	485e      	ldr	r0, [pc, #376]	; (8001ee0 <select_num+0x690>)
 8001d68:	f7ff fd2e 	bl	80017c8 <setColor>
				break;
 8001d6c:	e153      	b.n	8002016 <select_num+0x7c6>
			case 1:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, OFF, ON, ON);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9302      	str	r3, [sp, #8]
 8001d72:	2300      	movs	r3, #0
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	2301      	movs	r3, #1
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	2101      	movs	r1, #1
 8001d80:	4857      	ldr	r0, [pc, #348]	; (8001ee0 <select_num+0x690>)
 8001d82:	f7ff fd21 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, OFF, OFF, OFF);
 8001d86:	2301      	movs	r3, #1
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	2301      	movs	r3, #1
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2320      	movs	r3, #32
 8001d94:	2210      	movs	r2, #16
 8001d96:	2108      	movs	r1, #8
 8001d98:	4851      	ldr	r0, [pc, #324]	; (8001ee0 <select_num+0x690>)
 8001d9a:	f7ff fd15 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, OFF, OFF);
 8001d9e:	2301      	movs	r3, #1
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	2301      	movs	r3, #1
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	2301      	movs	r3, #1
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2340      	movs	r3, #64	; 0x40
 8001dac:	2220      	movs	r2, #32
 8001dae:	2110      	movs	r1, #16
 8001db0:	484b      	ldr	r0, [pc, #300]	; (8001ee0 <select_num+0x690>)
 8001db2:	f7ff fd09 	bl	80017c8 <setColor>
				break;
 8001db6:	e12e      	b.n	8002016 <select_num+0x7c6>
			case 2:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, OFF);
 8001db8:	2301      	movs	r3, #1
 8001dba:	9302      	str	r3, [sp, #8]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4845      	ldr	r0, [pc, #276]	; (8001ee0 <select_num+0x690>)
 8001dcc:	f7ff fcfc 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, OFF);
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2320      	movs	r3, #32
 8001dde:	2210      	movs	r2, #16
 8001de0:	2108      	movs	r1, #8
 8001de2:	483f      	ldr	r0, [pc, #252]	; (8001ee0 <select_num+0x690>)
 8001de4:	f7ff fcf0 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, OFF, ON);
 8001de8:	2300      	movs	r3, #0
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	2301      	movs	r3, #1
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	2300      	movs	r3, #0
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2340      	movs	r3, #64	; 0x40
 8001df6:	2220      	movs	r2, #32
 8001df8:	2110      	movs	r1, #16
 8001dfa:	4839      	ldr	r0, [pc, #228]	; (8001ee0 <select_num+0x690>)
 8001dfc:	f7ff fce4 	bl	80017c8 <setColor>
				break;
 8001e00:	e109      	b.n	8002016 <select_num+0x7c6>
			case 3:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8001e02:	2300      	movs	r3, #0
 8001e04:	9302      	str	r3, [sp, #8]
 8001e06:	2300      	movs	r3, #0
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2304      	movs	r3, #4
 8001e10:	2202      	movs	r2, #2
 8001e12:	2101      	movs	r1, #1
 8001e14:	4832      	ldr	r0, [pc, #200]	; (8001ee0 <select_num+0x690>)
 8001e16:	f7ff fcd7 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, OFF, OFF);
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	2301      	movs	r3, #1
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2300      	movs	r3, #0
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2320      	movs	r3, #32
 8001e28:	2210      	movs	r2, #16
 8001e2a:	2108      	movs	r1, #8
 8001e2c:	482c      	ldr	r0, [pc, #176]	; (8001ee0 <select_num+0x690>)
 8001e2e:	f7ff fccb 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, OFF, ON);
 8001e32:	2300      	movs	r3, #0
 8001e34:	9302      	str	r3, [sp, #8]
 8001e36:	2301      	movs	r3, #1
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2340      	movs	r3, #64	; 0x40
 8001e40:	2220      	movs	r2, #32
 8001e42:	2110      	movs	r1, #16
 8001e44:	4826      	ldr	r0, [pc, #152]	; (8001ee0 <select_num+0x690>)
 8001e46:	f7ff fcbf 	bl	80017c8 <setColor>
				break;
 8001e4a:	e0e4      	b.n	8002016 <select_num+0x7c6>
			case 4:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, OFF, ON, ON);
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	2300      	movs	r3, #0
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	2301      	movs	r3, #1
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2304      	movs	r3, #4
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4820      	ldr	r0, [pc, #128]	; (8001ee0 <select_num+0x690>)
 8001e60:	f7ff fcb2 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, OFF, OFF, ON);
 8001e64:	2300      	movs	r3, #0
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2320      	movs	r3, #32
 8001e72:	2210      	movs	r2, #16
 8001e74:	2108      	movs	r1, #8
 8001e76:	481a      	ldr	r0, [pc, #104]	; (8001ee0 <select_num+0x690>)
 8001e78:	f7ff fca6 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, ON, ON);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9302      	str	r3, [sp, #8]
 8001e80:	2300      	movs	r3, #0
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	2301      	movs	r3, #1
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2340      	movs	r3, #64	; 0x40
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <select_num+0x690>)
 8001e90:	f7ff fc9a 	bl	80017c8 <setColor>
				break;
 8001e94:	e0bf      	b.n	8002016 <select_num+0x7c6>
			case 5:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, OFF, ON);
 8001e96:	2300      	movs	r3, #0
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <select_num+0x690>)
 8001eaa:	f7ff fc8d 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, OFF, ON);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2320      	movs	r3, #32
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	2108      	movs	r1, #8
 8001ec0:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <select_num+0x690>)
 8001ec2:	f7ff fc81 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, ON, ON);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2340      	movs	r3, #64	; 0x40
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	4801      	ldr	r0, [pc, #4]	; (8001ee0 <select_num+0x690>)
 8001eda:	f7ff fc75 	bl	80017c8 <setColor>
				break;
 8001ede:	e09a      	b.n	8002016 <select_num+0x7c6>
 8001ee0:	40010c00 	.word	0x40010c00
			case 6:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, OFF, ON);
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9302      	str	r3, [sp, #8]
 8001ee8:	2301      	movs	r3, #1
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2300      	movs	r3, #0
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	484a      	ldr	r0, [pc, #296]	; (8002020 <select_num+0x7d0>)
 8001ef8:	f7ff fc66 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, ON);
 8001efc:	2300      	movs	r3, #0
 8001efe:	9302      	str	r3, [sp, #8]
 8001f00:	2300      	movs	r3, #0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	2300      	movs	r3, #0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2320      	movs	r3, #32
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	2108      	movs	r1, #8
 8001f0e:	4844      	ldr	r0, [pc, #272]	; (8002020 <select_num+0x7d0>)
 8001f10:	f7ff fc5a 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, ON, ON);
 8001f14:	2300      	movs	r3, #0
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2340      	movs	r3, #64	; 0x40
 8001f22:	2220      	movs	r2, #32
 8001f24:	2110      	movs	r1, #16
 8001f26:	483e      	ldr	r0, [pc, #248]	; (8002020 <select_num+0x7d0>)
 8001f28:	f7ff fc4e 	bl	80017c8 <setColor>
				break;
 8001f2c:	e073      	b.n	8002016 <select_num+0x7c6>
			case 7:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	2300      	movs	r3, #0
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4837      	ldr	r0, [pc, #220]	; (8002020 <select_num+0x7d0>)
 8001f42:	f7ff fc41 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, OFF, OFF, OFF);
 8001f46:	2301      	movs	r3, #1
 8001f48:	9302      	str	r3, [sp, #8]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	2301      	movs	r3, #1
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2320      	movs	r3, #32
 8001f54:	2210      	movs	r2, #16
 8001f56:	2108      	movs	r1, #8
 8001f58:	4831      	ldr	r0, [pc, #196]	; (8002020 <select_num+0x7d0>)
 8001f5a:	f7ff fc35 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, OFF, OFF);
 8001f5e:	2301      	movs	r3, #1
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	2301      	movs	r3, #1
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	2301      	movs	r3, #1
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2340      	movs	r3, #64	; 0x40
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	2110      	movs	r1, #16
 8001f70:	482b      	ldr	r0, [pc, #172]	; (8002020 <select_num+0x7d0>)
 8001f72:	f7ff fc29 	bl	80017c8 <setColor>
				break;
 8001f76:	e04e      	b.n	8002016 <select_num+0x7c6>
			case 8:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9302      	str	r3, [sp, #8]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	2300      	movs	r3, #0
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2304      	movs	r3, #4
 8001f86:	2202      	movs	r2, #2
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4825      	ldr	r0, [pc, #148]	; (8002020 <select_num+0x7d0>)
 8001f8c:	f7ff fc1c 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, ON, ON);
 8001f90:	2300      	movs	r3, #0
 8001f92:	9302      	str	r3, [sp, #8]
 8001f94:	2300      	movs	r3, #0
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	481f      	ldr	r0, [pc, #124]	; (8002020 <select_num+0x7d0>)
 8001fa4:	f7ff fc10 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, ON, ON, ON);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	2300      	movs	r3, #0
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2340      	movs	r3, #64	; 0x40
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	2110      	movs	r1, #16
 8001fba:	4819      	ldr	r0, [pc, #100]	; (8002020 <select_num+0x7d0>)
 8001fbc:	f7ff fc04 	bl	80017c8 <setColor>
				break;
 8001fc0:	e029      	b.n	8002016 <select_num+0x7c6>
			case 9:
				setColor(GPIOB, SEG_A_Pin, SEG_B_Pin, SEG_C_Pin, ON, ON, ON);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9302      	str	r3, [sp, #8]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2304      	movs	r3, #4
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	4812      	ldr	r0, [pc, #72]	; (8002020 <select_num+0x7d0>)
 8001fd6:	f7ff fbf7 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_D_Pin, SEG_E_Pin, SEG_F_Pin, ON, OFF, ON);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	2301      	movs	r3, #1
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	2210      	movs	r2, #16
 8001fea:	2108      	movs	r1, #8
 8001fec:	480c      	ldr	r0, [pc, #48]	; (8002020 <select_num+0x7d0>)
 8001fee:	f7ff fbeb 	bl	80017c8 <setColor>
				setColor(GPIOB, SEG_E_Pin, SEG_F_Pin, SEG_G_Pin, OFF, ON, ON);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	9302      	str	r3, [sp, #8]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2340      	movs	r3, #64	; 0x40
 8002000:	2220      	movs	r2, #32
 8002002:	2110      	movs	r1, #16
 8002004:	4806      	ldr	r0, [pc, #24]	; (8002020 <select_num+0x7d0>)
 8002006:	f7ff fbdf 	bl	80017c8 <setColor>
				break;
 800200a:	e004      	b.n	8002016 <select_num+0x7c6>
			break;
 800200c:	bf00      	nop
 800200e:	e002      	b.n	8002016 <select_num+0x7c6>
			default:
				break;
		}
}
 8002010:	bf00      	nop
 8002012:	e000      	b.n	8002016 <select_num+0x7c6>
				break;
 8002014:	bf00      	nop
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40010c00 	.word	0x40010c00

08002024 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002024:	f7ff fbca 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002028:	480b      	ldr	r0, [pc, #44]	; (8002058 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800202a:	490c      	ldr	r1, [pc, #48]	; (800205c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800202c:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <LoopFillZerobss+0x16>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002040:	4c09      	ldr	r4, [pc, #36]	; (8002068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204e:	f001 faff 	bl	8003650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002052:	f7ff f83b 	bl	80010cc <main>
  bx lr
 8002056:	4770      	bx	lr
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002060:	08003894 	.word	0x08003894
  ldr r2, =_sbss
 8002064:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002068:	20000184 	.word	0x20000184

0800206c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC1_2_IRQHandler>
	...

08002070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <HAL_Init+0x28>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a07      	ldr	r2, [pc, #28]	; (8002098 <HAL_Init+0x28>)
 800207a:	f043 0310 	orr.w	r3, r3, #16
 800207e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002080:	2003      	movs	r0, #3
 8002082:	f000 f923 	bl	80022cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002086:	200f      	movs	r0, #15
 8002088:	f000 f808 	bl	800209c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800208c:	f7ff fad8 	bl	8001640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40022000 	.word	0x40022000

0800209c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_InitTick+0x54>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_InitTick+0x58>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f93b 	bl	8002336 <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00e      	b.n	80020e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d80a      	bhi.n	80020e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f000 f903 	bl	80022e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_InitTick+0x5c>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000054 	.word	0x20000054
 80020f4:	2000005c 	.word	0x2000005c
 80020f8:	20000058 	.word	0x20000058

080020fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_IncTick+0x1c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_IncTick+0x20>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a03      	ldr	r2, [pc, #12]	; (800211c <HAL_IncTick+0x20>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	2000005c 	.word	0x2000005c
 800211c:	20000170 	.word	0x20000170

08002120 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return uwTick;
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <HAL_GetTick+0x10>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	20000170 	.word	0x20000170

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4906      	ldr	r1, [pc, #24]	; (80021cc <__NVIC_EnableIRQ+0x34>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100

080021d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db0a      	blt.n	80021fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	490c      	ldr	r1, [pc, #48]	; (800221c <__NVIC_SetPriority+0x4c>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	440b      	add	r3, r1
 80021f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f8:	e00a      	b.n	8002210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4908      	ldr	r1, [pc, #32]	; (8002220 <__NVIC_SetPriority+0x50>)
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	3b04      	subs	r3, #4
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	440b      	add	r3, r1
 800220e:	761a      	strb	r2, [r3, #24]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f1c3 0307 	rsb	r3, r3, #7
 800223e:	2b04      	cmp	r3, #4
 8002240:	bf28      	it	cs
 8002242:	2304      	movcs	r3, #4
 8002244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3304      	adds	r3, #4
 800224a:	2b06      	cmp	r3, #6
 800224c:	d902      	bls.n	8002254 <NVIC_EncodePriority+0x30>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3b03      	subs	r3, #3
 8002252:	e000      	b.n	8002256 <NVIC_EncodePriority+0x32>
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	401a      	ands	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800226c:	f04f 31ff 	mov.w	r1, #4294967295
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43d9      	mvns	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	4313      	orrs	r3, r2
         );
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002298:	d301      	bcc.n	800229e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800229a:	2301      	movs	r3, #1
 800229c:	e00f      	b.n	80022be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <SysTick_Config+0x40>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a6:	210f      	movs	r1, #15
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f7ff ff90 	bl	80021d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <SysTick_Config+0x40>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <SysTick_Config+0x40>)
 80022b8:	2207      	movs	r2, #7
 80022ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	e000e010 	.word	0xe000e010

080022cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ff2d 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f4:	f7ff ff42 	bl	800217c <__NVIC_GetPriorityGrouping>
 80022f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	6978      	ldr	r0, [r7, #20]
 8002300:	f7ff ff90 	bl	8002224 <NVIC_EncodePriority>
 8002304:	4602      	mov	r2, r0
 8002306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff5f 	bl	80021d0 <__NVIC_SetPriority>
}
 8002312:	bf00      	nop
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff35 	bl	8002198 <__NVIC_EnableIRQ>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffa2 	bl	8002288 <SysTick_Config>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b08b      	sub	sp, #44	; 0x2c
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002362:	e148      	b.n	80025f6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002364:	2201      	movs	r2, #1
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 8137 	bne.w	80025f0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4aa3      	ldr	r2, [pc, #652]	; (8002614 <HAL_GPIO_Init+0x2c4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d05e      	beq.n	800244a <HAL_GPIO_Init+0xfa>
 800238c:	4aa1      	ldr	r2, [pc, #644]	; (8002614 <HAL_GPIO_Init+0x2c4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d875      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 8002392:	4aa1      	ldr	r2, [pc, #644]	; (8002618 <HAL_GPIO_Init+0x2c8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d058      	beq.n	800244a <HAL_GPIO_Init+0xfa>
 8002398:	4a9f      	ldr	r2, [pc, #636]	; (8002618 <HAL_GPIO_Init+0x2c8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d86f      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 800239e:	4a9f      	ldr	r2, [pc, #636]	; (800261c <HAL_GPIO_Init+0x2cc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d052      	beq.n	800244a <HAL_GPIO_Init+0xfa>
 80023a4:	4a9d      	ldr	r2, [pc, #628]	; (800261c <HAL_GPIO_Init+0x2cc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d869      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 80023aa:	4a9d      	ldr	r2, [pc, #628]	; (8002620 <HAL_GPIO_Init+0x2d0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d04c      	beq.n	800244a <HAL_GPIO_Init+0xfa>
 80023b0:	4a9b      	ldr	r2, [pc, #620]	; (8002620 <HAL_GPIO_Init+0x2d0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d863      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 80023b6:	4a9b      	ldr	r2, [pc, #620]	; (8002624 <HAL_GPIO_Init+0x2d4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d046      	beq.n	800244a <HAL_GPIO_Init+0xfa>
 80023bc:	4a99      	ldr	r2, [pc, #612]	; (8002624 <HAL_GPIO_Init+0x2d4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d85d      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 80023c2:	2b12      	cmp	r3, #18
 80023c4:	d82a      	bhi.n	800241c <HAL_GPIO_Init+0xcc>
 80023c6:	2b12      	cmp	r3, #18
 80023c8:	d859      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 80023ca:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <HAL_GPIO_Init+0x80>)
 80023cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d0:	0800244b 	.word	0x0800244b
 80023d4:	08002425 	.word	0x08002425
 80023d8:	08002437 	.word	0x08002437
 80023dc:	08002479 	.word	0x08002479
 80023e0:	0800247f 	.word	0x0800247f
 80023e4:	0800247f 	.word	0x0800247f
 80023e8:	0800247f 	.word	0x0800247f
 80023ec:	0800247f 	.word	0x0800247f
 80023f0:	0800247f 	.word	0x0800247f
 80023f4:	0800247f 	.word	0x0800247f
 80023f8:	0800247f 	.word	0x0800247f
 80023fc:	0800247f 	.word	0x0800247f
 8002400:	0800247f 	.word	0x0800247f
 8002404:	0800247f 	.word	0x0800247f
 8002408:	0800247f 	.word	0x0800247f
 800240c:	0800247f 	.word	0x0800247f
 8002410:	0800247f 	.word	0x0800247f
 8002414:	0800242d 	.word	0x0800242d
 8002418:	08002441 	.word	0x08002441
 800241c:	4a82      	ldr	r2, [pc, #520]	; (8002628 <HAL_GPIO_Init+0x2d8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002422:	e02c      	b.n	800247e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e029      	b.n	8002480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	3304      	adds	r3, #4
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e024      	b.n	8002480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	3308      	adds	r3, #8
 800243c:	623b      	str	r3, [r7, #32]
          break;
 800243e:	e01f      	b.n	8002480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	330c      	adds	r3, #12
 8002446:	623b      	str	r3, [r7, #32]
          break;
 8002448:	e01a      	b.n	8002480 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002452:	2304      	movs	r3, #4
 8002454:	623b      	str	r3, [r7, #32]
          break;
 8002456:	e013      	b.n	8002480 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d105      	bne.n	800246c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002460:	2308      	movs	r3, #8
 8002462:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	611a      	str	r2, [r3, #16]
          break;
 800246a:	e009      	b.n	8002480 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800246c:	2308      	movs	r3, #8
 800246e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	615a      	str	r2, [r3, #20]
          break;
 8002476:	e003      	b.n	8002480 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
          break;
 800247c:	e000      	b.n	8002480 <HAL_GPIO_Init+0x130>
          break;
 800247e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2bff      	cmp	r3, #255	; 0xff
 8002484:	d801      	bhi.n	800248a <HAL_GPIO_Init+0x13a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	e001      	b.n	800248e <HAL_GPIO_Init+0x13e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3304      	adds	r3, #4
 800248e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2bff      	cmp	r3, #255	; 0xff
 8002494:	d802      	bhi.n	800249c <HAL_GPIO_Init+0x14c>
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	e002      	b.n	80024a2 <HAL_GPIO_Init+0x152>
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	3b08      	subs	r3, #8
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	210f      	movs	r1, #15
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	401a      	ands	r2, r3
 80024b4:	6a39      	ldr	r1, [r7, #32]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	431a      	orrs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8090 	beq.w	80025f0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024d0:	4b56      	ldr	r3, [pc, #344]	; (800262c <HAL_GPIO_Init+0x2dc>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a55      	ldr	r2, [pc, #340]	; (800262c <HAL_GPIO_Init+0x2dc>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6193      	str	r3, [r2, #24]
 80024dc:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_GPIO_Init+0x2dc>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024e8:	4a51      	ldr	r2, [pc, #324]	; (8002630 <HAL_GPIO_Init+0x2e0>)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	3302      	adds	r3, #2
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a49      	ldr	r2, [pc, #292]	; (8002634 <HAL_GPIO_Init+0x2e4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00d      	beq.n	8002530 <HAL_GPIO_Init+0x1e0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a48      	ldr	r2, [pc, #288]	; (8002638 <HAL_GPIO_Init+0x2e8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d007      	beq.n	800252c <HAL_GPIO_Init+0x1dc>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a47      	ldr	r2, [pc, #284]	; (800263c <HAL_GPIO_Init+0x2ec>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_GPIO_Init+0x1d8>
 8002524:	2302      	movs	r3, #2
 8002526:	e004      	b.n	8002532 <HAL_GPIO_Init+0x1e2>
 8002528:	2303      	movs	r3, #3
 800252a:	e002      	b.n	8002532 <HAL_GPIO_Init+0x1e2>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_GPIO_Init+0x1e2>
 8002530:	2300      	movs	r3, #0
 8002532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002534:	f002 0203 	and.w	r2, r2, #3
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	4093      	lsls	r3, r2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002542:	493b      	ldr	r1, [pc, #236]	; (8002630 <HAL_GPIO_Init+0x2e0>)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	3302      	adds	r3, #2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800255c:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	4937      	ldr	r1, [pc, #220]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800256a:	4b35      	ldr	r3, [pc, #212]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	4933      	ldr	r1, [pc, #204]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 8002574:	4013      	ands	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002584:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	492d      	ldr	r1, [pc, #180]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	4929      	ldr	r1, [pc, #164]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 800259c:	4013      	ands	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4923      	ldr	r1, [pc, #140]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	491f      	ldr	r1, [pc, #124]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4919      	ldr	r1, [pc, #100]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e006      	b.n	80025f0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4915      	ldr	r1, [pc, #84]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	3301      	adds	r3, #1
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	f47f aeaf 	bne.w	8002364 <HAL_GPIO_Init+0x14>
  }
}
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	372c      	adds	r7, #44	; 0x2c
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	10320000 	.word	0x10320000
 8002618:	10310000 	.word	0x10310000
 800261c:	10220000 	.word	0x10220000
 8002620:	10210000 	.word	0x10210000
 8002624:	10120000 	.word	0x10120000
 8002628:	10110000 	.word	0x10110000
 800262c:	40021000 	.word	0x40021000
 8002630:	40010000 	.word	0x40010000
 8002634:	40010800 	.word	0x40010800
 8002638:	40010c00 	.word	0x40010c00
 800263c:	40011000 	.word	0x40011000
 8002640:	40010400 	.word	0x40010400

08002644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e001      	b.n	8002666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]
 800267e:	4613      	mov	r3, r2
 8002680:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002682:	787b      	ldrb	r3, [r7, #1]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002688:	887a      	ldrh	r2, [r7, #2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800268e:	e003      	b.n	8002698 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	041a      	lsls	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	611a      	str	r2, [r3, #16]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	041a      	lsls	r2, r3, #16
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43d9      	mvns	r1, r3
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	400b      	ands	r3, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e26c      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8087 	beq.w	8002802 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f4:	4b92      	ldr	r3, [pc, #584]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d00c      	beq.n	800271a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002700:	4b8f      	ldr	r3, [pc, #572]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d112      	bne.n	8002732 <HAL_RCC_OscConfig+0x5e>
 800270c:	4b8c      	ldr	r3, [pc, #560]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d10b      	bne.n	8002732 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271a:	4b89      	ldr	r3, [pc, #548]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d06c      	beq.n	8002800 <HAL_RCC_OscConfig+0x12c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d168      	bne.n	8002800 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e246      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x76>
 800273c:	4b80      	ldr	r3, [pc, #512]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a7f      	ldr	r2, [pc, #508]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e02e      	b.n	80027a8 <HAL_RCC_OscConfig+0xd4>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x98>
 8002752:	4b7b      	ldr	r3, [pc, #492]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7a      	ldr	r2, [pc, #488]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b78      	ldr	r3, [pc, #480]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a77      	ldr	r2, [pc, #476]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e01d      	b.n	80027a8 <HAL_RCC_OscConfig+0xd4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0xbc>
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a71      	ldr	r2, [pc, #452]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6e      	ldr	r2, [pc, #440]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0xd4>
 8002790:	4b6b      	ldr	r3, [pc, #428]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6a      	ldr	r2, [pc, #424]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b68      	ldr	r3, [pc, #416]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a67      	ldr	r2, [pc, #412]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff fcb6 	bl	8002120 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff fcb2 	bl	8002120 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1fa      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b5d      	ldr	r3, [pc, #372]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0xe4>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff fca2 	bl	8002120 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff fc9e 	bl	8002120 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1e6      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	4b53      	ldr	r3, [pc, #332]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x10c>
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d063      	beq.n	80028d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800280e:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800281a:	4b49      	ldr	r3, [pc, #292]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b08      	cmp	r3, #8
 8002824:	d11c      	bne.n	8002860 <HAL_RCC_OscConfig+0x18c>
 8002826:	4b46      	ldr	r3, [pc, #280]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d116      	bne.n	8002860 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	4b43      	ldr	r3, [pc, #268]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_RCC_OscConfig+0x176>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e1ba      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4939      	ldr	r1, [pc, #228]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	e03a      	b.n	80028d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7ff fc57 	bl	8002120 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002876:	f7ff fc53 	bl	8002120 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e19b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4927      	ldr	r1, [pc, #156]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
 80028a8:	e015      	b.n	80028d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff fc36 	bl	8002120 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b8:	f7ff fc32 	bl	8002120 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e17a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d03a      	beq.n	8002958 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d019      	beq.n	800291e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_RCC_OscConfig+0x274>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f0:	f7ff fc16 	bl	8002120 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f8:	f7ff fc12 	bl	8002120 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e15a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002916:	2001      	movs	r0, #1
 8002918:	f000 fa9a 	bl	8002e50 <RCC_Delay>
 800291c:	e01c      	b.n	8002958 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_RCC_OscConfig+0x274>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7ff fbfc 	bl	8002120 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292a:	e00f      	b.n	800294c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292c:	f7ff fbf8 	bl	8002120 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d908      	bls.n	800294c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e140      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	42420000 	.word	0x42420000
 8002948:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b9e      	ldr	r3, [pc, #632]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e9      	bne.n	800292c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80a6 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b97      	ldr	r3, [pc, #604]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b94      	ldr	r3, [pc, #592]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	4a93      	ldr	r2, [pc, #588]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	61d3      	str	r3, [r2, #28]
 8002982:	4b91      	ldr	r3, [pc, #580]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002992:	4b8e      	ldr	r3, [pc, #568]	; (8002bcc <HAL_RCC_OscConfig+0x4f8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d118      	bne.n	80029d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299e:	4b8b      	ldr	r3, [pc, #556]	; (8002bcc <HAL_RCC_OscConfig+0x4f8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a8a      	ldr	r2, [pc, #552]	; (8002bcc <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029aa:	f7ff fbb9 	bl	8002120 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b2:	f7ff fbb5 	bl	8002120 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b64      	cmp	r3, #100	; 0x64
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e0fd      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	4b81      	ldr	r3, [pc, #516]	; (8002bcc <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x312>
 80029d8:	4b7b      	ldr	r3, [pc, #492]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4a7a      	ldr	r2, [pc, #488]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6213      	str	r3, [r2, #32]
 80029e4:	e02d      	b.n	8002a42 <HAL_RCC_OscConfig+0x36e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x334>
 80029ee:	4b76      	ldr	r3, [pc, #472]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4a75      	ldr	r2, [pc, #468]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6213      	str	r3, [r2, #32]
 80029fa:	4b73      	ldr	r3, [pc, #460]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a72      	ldr	r2, [pc, #456]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	e01c      	b.n	8002a42 <HAL_RCC_OscConfig+0x36e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x356>
 8002a10:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a6c      	ldr	r2, [pc, #432]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6213      	str	r3, [r2, #32]
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a69      	ldr	r2, [pc, #420]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	e00b      	b.n	8002a42 <HAL_RCC_OscConfig+0x36e>
 8002a2a:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a66      	ldr	r2, [pc, #408]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	4b64      	ldr	r3, [pc, #400]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a63      	ldr	r2, [pc, #396]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d015      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7ff fb69 	bl	8002120 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7ff fb65 	bl	8002120 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0ab      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a68:	4b57      	ldr	r3, [pc, #348]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ee      	beq.n	8002a52 <HAL_RCC_OscConfig+0x37e>
 8002a74:	e014      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7ff fb53 	bl	8002120 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7ff fb4f 	bl	8002120 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e095      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a94:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4b48      	ldr	r3, [pc, #288]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4a47      	ldr	r2, [pc, #284]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8081 	beq.w	8002bbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002abc:	4b42      	ldr	r3, [pc, #264]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d061      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d146      	bne.n	8002b5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b3f      	ldr	r3, [pc, #252]	; (8002bd0 <HAL_RCC_OscConfig+0x4fc>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fb23 	bl	8002120 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ade:	f7ff fb1f 	bl	8002120 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e067      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af0:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d108      	bne.n	8002b18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b06:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	492d      	ldr	r1, [pc, #180]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b18:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a19      	ldr	r1, [r3, #32]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	4927      	ldr	r1, [pc, #156]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b30:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_RCC_OscConfig+0x4fc>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7ff faf3 	bl	8002120 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7ff faef 	bl	8002120 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e037      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x46a>
 8002b5c:	e02f      	b.n	8002bbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_RCC_OscConfig+0x4fc>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff fadc 	bl	8002120 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7ff fad8 	bl	8002120 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e020      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x498>
 8002b8a:	e018      	b.n	8002bbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e013      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d106      	bne.n	8002bba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	42420060 	.word	0x42420060

08002bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0d0      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b6a      	ldr	r3, [pc, #424]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d910      	bls.n	8002c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b67      	ldr	r3, [pc, #412]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 0207 	bic.w	r2, r3, #7
 8002bfe:	4965      	ldr	r1, [pc, #404]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b63      	ldr	r3, [pc, #396]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0b8      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d020      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c30:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a58      	ldr	r2, [pc, #352]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c48:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a52      	ldr	r2, [pc, #328]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c54:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	494d      	ldr	r1, [pc, #308]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d040      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d115      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e07f      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e073      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e06b      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4936      	ldr	r1, [pc, #216]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7ff fa2c 	bl	8002120 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7ff fa28 	bl	8002120 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e053      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	4b2d      	ldr	r3, [pc, #180]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 020c 	and.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1eb      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d210      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 0207 	bic.w	r2, r3, #7
 8002d0a:	4922      	ldr	r1, [pc, #136]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e032      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4916      	ldr	r1, [pc, #88]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	490e      	ldr	r1, [pc, #56]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d62:	f000 f821 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	490a      	ldr	r1, [pc, #40]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	5ccb      	ldrb	r3, [r1, r3]
 8002d76:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_RCC_ClockConfig+0x1d0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f98a 	bl	800209c <HAL_InitTick>

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40022000 	.word	0x40022000
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	08003868 	.word	0x08003868
 8002da0:	20000054 	.word	0x20000054
 8002da4:	20000058 	.word	0x20000058

08002da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dc2:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x30>
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x36>
 8002dd6:	e027      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dda:	613b      	str	r3, [r7, #16]
      break;
 8002ddc:	e027      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	0c9b      	lsrs	r3, r3, #18
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002de8:	5cd3      	ldrb	r3, [r2, r3]
 8002dea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d010      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0c5b      	lsrs	r3, r3, #17
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e02:	5cd3      	ldrb	r3, [r2, r3]
 8002e04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e0a:	fb02 f203 	mul.w	r2, r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	e004      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e1c:	fb02 f303 	mul.w	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	613b      	str	r3, [r7, #16]
      break;
 8002e26:	e002      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e2a:	613b      	str	r3, [r7, #16]
      break;
 8002e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e2e:	693b      	ldr	r3, [r7, #16]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	007a1200 	.word	0x007a1200
 8002e44:	08003878 	.word	0x08003878
 8002e48:	08003888 	.word	0x08003888
 8002e4c:	003d0900 	.word	0x003d0900

08002e50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <RCC_Delay+0x34>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <RCC_Delay+0x38>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	0a5b      	lsrs	r3, r3, #9
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e6c:	bf00      	nop
  }
  while (Delay --);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1e5a      	subs	r2, r3, #1
 8002e72:	60fa      	str	r2, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f9      	bne.n	8002e6c <RCC_Delay+0x1c>
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	20000054 	.word	0x20000054
 8002e88:	10624dd3 	.word	0x10624dd3

08002e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e041      	b.n	8002f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe fbf6 	bl	80016a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 fa56 	bl	800337c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d001      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e035      	b.n	8002fb0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <HAL_TIM_Base_Start_IT+0x90>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_TIM_Base_Start_IT+0x4e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6e:	d004      	beq.n	8002f7a <HAL_TIM_Base_Start_IT+0x4e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_TIM_Base_Start_IT+0x94>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d111      	bne.n	8002f9e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d010      	beq.n	8002fae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9c:	e007      	b.n	8002fae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40000400 	.word	0x40000400

08002fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d020      	beq.n	8003028 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01b      	beq.n	8003028 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0202 	mvn.w	r2, #2
 8002ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f998 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8003014:	e005      	b.n	8003022 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f98b 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f99a 	bl	8003356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d020      	beq.n	8003074 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01b      	beq.n	8003074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0204 	mvn.w	r2, #4
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f972 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f965 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f974 	bl	8003356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d020      	beq.n	80030c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01b      	beq.n	80030c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0208 	mvn.w	r2, #8
 8003090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2204      	movs	r2, #4
 8003096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f94c 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 80030ac:	e005      	b.n	80030ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f93f 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f94e 	bl	8003356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d020      	beq.n	800310c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0210 	mvn.w	r2, #16
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2208      	movs	r2, #8
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f926 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f919 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f928 	bl	8003356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0201 	mvn.w	r2, #1
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe f8e4 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa6f 	bl	8003632 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8f8 	bl	8003368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00c      	beq.n	800319c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0220 	mvn.w	r2, #32
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fa42 	bl	8003620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_TIM_ConfigClockSource+0x1c>
 80031bc:	2302      	movs	r3, #2
 80031be:	e0b4      	b.n	800332a <HAL_TIM_ConfigClockSource+0x186>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f8:	d03e      	beq.n	8003278 <HAL_TIM_ConfigClockSource+0xd4>
 80031fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fe:	f200 8087 	bhi.w	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003206:	f000 8086 	beq.w	8003316 <HAL_TIM_ConfigClockSource+0x172>
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320e:	d87f      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003210:	2b70      	cmp	r3, #112	; 0x70
 8003212:	d01a      	beq.n	800324a <HAL_TIM_ConfigClockSource+0xa6>
 8003214:	2b70      	cmp	r3, #112	; 0x70
 8003216:	d87b      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003218:	2b60      	cmp	r3, #96	; 0x60
 800321a:	d050      	beq.n	80032be <HAL_TIM_ConfigClockSource+0x11a>
 800321c:	2b60      	cmp	r3, #96	; 0x60
 800321e:	d877      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003220:	2b50      	cmp	r3, #80	; 0x50
 8003222:	d03c      	beq.n	800329e <HAL_TIM_ConfigClockSource+0xfa>
 8003224:	2b50      	cmp	r3, #80	; 0x50
 8003226:	d873      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d058      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x13a>
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d86f      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003230:	2b30      	cmp	r3, #48	; 0x30
 8003232:	d064      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x15a>
 8003234:	2b30      	cmp	r3, #48	; 0x30
 8003236:	d86b      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003238:	2b20      	cmp	r3, #32
 800323a:	d060      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x15a>
 800323c:	2b20      	cmp	r3, #32
 800323e:	d867      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
 8003240:	2b00      	cmp	r3, #0
 8003242:	d05c      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x15a>
 8003244:	2b10      	cmp	r3, #16
 8003246:	d05a      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x15a>
 8003248:	e062      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f000 f96a 	bl	8003532 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800326c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	609a      	str	r2, [r3, #8]
      break;
 8003276:	e04f      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f000 f953 	bl	8003532 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800329a:	609a      	str	r2, [r3, #8]
      break;
 800329c:	e03c      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f000 f8ca 	bl	8003444 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2150      	movs	r1, #80	; 0x50
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f921 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 80032bc:	e02c      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6859      	ldr	r1, [r3, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f000 f8e8 	bl	80034a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2160      	movs	r1, #96	; 0x60
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f911 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 80032dc:	e01c      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f000 f8aa 	bl	8003444 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2140      	movs	r1, #64	; 0x40
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f901 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 80032fc:	e00c      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f000 f8f8 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 800330e:	e003      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      break;
 8003314:	e000      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
	...

0800337c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a2b      	ldr	r2, [pc, #172]	; (800343c <TIM_Base_SetConfig+0xc0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d007      	beq.n	80033a4 <TIM_Base_SetConfig+0x28>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d003      	beq.n	80033a4 <TIM_Base_SetConfig+0x28>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a28      	ldr	r2, [pc, #160]	; (8003440 <TIM_Base_SetConfig+0xc4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d108      	bne.n	80033b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a20      	ldr	r2, [pc, #128]	; (800343c <TIM_Base_SetConfig+0xc0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <TIM_Base_SetConfig+0x52>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d003      	beq.n	80033ce <TIM_Base_SetConfig+0x52>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <TIM_Base_SetConfig+0xc4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d108      	bne.n	80033e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a0d      	ldr	r2, [pc, #52]	; (800343c <TIM_Base_SetConfig+0xc0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d103      	bne.n	8003414 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f023 0201 	bic.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]
  }
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40000400 	.word	0x40000400

08003444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f023 0201 	bic.w	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800346e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f023 030a 	bic.w	r3, r3, #10
 8003480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f023 0210 	bic.w	r2, r3, #16
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	031b      	lsls	r3, r3, #12
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	621a      	str	r2, [r3, #32]
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	f043 0307 	orr.w	r3, r3, #7
 8003520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	609a      	str	r2, [r3, #8]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003532:	b480      	push	{r7}
 8003534:	b087      	sub	sp, #28
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800354c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	021a      	lsls	r2, r3, #8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	431a      	orrs	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4313      	orrs	r3, r2
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	609a      	str	r2, [r3, #8]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003584:	2302      	movs	r3, #2
 8003586:	e041      	b.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a14      	ldr	r2, [pc, #80]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d004      	beq.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d10c      	bne.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40000400 	.word	0x40000400

08003620 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <__errno>:
 8003644:	4b01      	ldr	r3, [pc, #4]	; (800364c <__errno+0x8>)
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000060 	.word	0x20000060

08003650 <__libc_init_array>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	2600      	movs	r6, #0
 8003654:	4d0c      	ldr	r5, [pc, #48]	; (8003688 <__libc_init_array+0x38>)
 8003656:	4c0d      	ldr	r4, [pc, #52]	; (800368c <__libc_init_array+0x3c>)
 8003658:	1b64      	subs	r4, r4, r5
 800365a:	10a4      	asrs	r4, r4, #2
 800365c:	42a6      	cmp	r6, r4
 800365e:	d109      	bne.n	8003674 <__libc_init_array+0x24>
 8003660:	f000 f8f6 	bl	8003850 <_init>
 8003664:	2600      	movs	r6, #0
 8003666:	4d0a      	ldr	r5, [pc, #40]	; (8003690 <__libc_init_array+0x40>)
 8003668:	4c0a      	ldr	r4, [pc, #40]	; (8003694 <__libc_init_array+0x44>)
 800366a:	1b64      	subs	r4, r4, r5
 800366c:	10a4      	asrs	r4, r4, #2
 800366e:	42a6      	cmp	r6, r4
 8003670:	d105      	bne.n	800367e <__libc_init_array+0x2e>
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	f855 3b04 	ldr.w	r3, [r5], #4
 8003678:	4798      	blx	r3
 800367a:	3601      	adds	r6, #1
 800367c:	e7ee      	b.n	800365c <__libc_init_array+0xc>
 800367e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003682:	4798      	blx	r3
 8003684:	3601      	adds	r6, #1
 8003686:	e7f2      	b.n	800366e <__libc_init_array+0x1e>
 8003688:	0800388c 	.word	0x0800388c
 800368c:	0800388c 	.word	0x0800388c
 8003690:	0800388c 	.word	0x0800388c
 8003694:	08003890 	.word	0x08003890

08003698 <malloc>:
 8003698:	4b02      	ldr	r3, [pc, #8]	; (80036a4 <malloc+0xc>)
 800369a:	4601      	mov	r1, r0
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	f000 b85f 	b.w	8003760 <_malloc_r>
 80036a2:	bf00      	nop
 80036a4:	20000060 	.word	0x20000060

080036a8 <free>:
 80036a8:	4b02      	ldr	r3, [pc, #8]	; (80036b4 <free+0xc>)
 80036aa:	4601      	mov	r1, r0
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	f000 b80b 	b.w	80036c8 <_free_r>
 80036b2:	bf00      	nop
 80036b4:	20000060 	.word	0x20000060

080036b8 <memset>:
 80036b8:	4603      	mov	r3, r0
 80036ba:	4402      	add	r2, r0
 80036bc:	4293      	cmp	r3, r2
 80036be:	d100      	bne.n	80036c2 <memset+0xa>
 80036c0:	4770      	bx	lr
 80036c2:	f803 1b01 	strb.w	r1, [r3], #1
 80036c6:	e7f9      	b.n	80036bc <memset+0x4>

080036c8 <_free_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4605      	mov	r5, r0
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d043      	beq.n	8003758 <_free_r+0x90>
 80036d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d4:	1f0c      	subs	r4, r1, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bfb8      	it	lt
 80036da:	18e4      	addlt	r4, r4, r3
 80036dc:	f000 f8aa 	bl	8003834 <__malloc_lock>
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <_free_r+0x94>)
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	4610      	mov	r0, r2
 80036e6:	b933      	cbnz	r3, 80036f6 <_free_r+0x2e>
 80036e8:	6063      	str	r3, [r4, #4]
 80036ea:	6014      	str	r4, [r2, #0]
 80036ec:	4628      	mov	r0, r5
 80036ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036f2:	f000 b8a5 	b.w	8003840 <__malloc_unlock>
 80036f6:	42a3      	cmp	r3, r4
 80036f8:	d90a      	bls.n	8003710 <_free_r+0x48>
 80036fa:	6821      	ldr	r1, [r4, #0]
 80036fc:	1862      	adds	r2, r4, r1
 80036fe:	4293      	cmp	r3, r2
 8003700:	bf01      	itttt	eq
 8003702:	681a      	ldreq	r2, [r3, #0]
 8003704:	685b      	ldreq	r3, [r3, #4]
 8003706:	1852      	addeq	r2, r2, r1
 8003708:	6022      	streq	r2, [r4, #0]
 800370a:	6063      	str	r3, [r4, #4]
 800370c:	6004      	str	r4, [r0, #0]
 800370e:	e7ed      	b.n	80036ec <_free_r+0x24>
 8003710:	461a      	mov	r2, r3
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	b10b      	cbz	r3, 800371a <_free_r+0x52>
 8003716:	42a3      	cmp	r3, r4
 8003718:	d9fa      	bls.n	8003710 <_free_r+0x48>
 800371a:	6811      	ldr	r1, [r2, #0]
 800371c:	1850      	adds	r0, r2, r1
 800371e:	42a0      	cmp	r0, r4
 8003720:	d10b      	bne.n	800373a <_free_r+0x72>
 8003722:	6820      	ldr	r0, [r4, #0]
 8003724:	4401      	add	r1, r0
 8003726:	1850      	adds	r0, r2, r1
 8003728:	4283      	cmp	r3, r0
 800372a:	6011      	str	r1, [r2, #0]
 800372c:	d1de      	bne.n	80036ec <_free_r+0x24>
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4401      	add	r1, r0
 8003734:	6011      	str	r1, [r2, #0]
 8003736:	6053      	str	r3, [r2, #4]
 8003738:	e7d8      	b.n	80036ec <_free_r+0x24>
 800373a:	d902      	bls.n	8003742 <_free_r+0x7a>
 800373c:	230c      	movs	r3, #12
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	e7d4      	b.n	80036ec <_free_r+0x24>
 8003742:	6820      	ldr	r0, [r4, #0]
 8003744:	1821      	adds	r1, r4, r0
 8003746:	428b      	cmp	r3, r1
 8003748:	bf01      	itttt	eq
 800374a:	6819      	ldreq	r1, [r3, #0]
 800374c:	685b      	ldreq	r3, [r3, #4]
 800374e:	1809      	addeq	r1, r1, r0
 8003750:	6021      	streq	r1, [r4, #0]
 8003752:	6063      	str	r3, [r4, #4]
 8003754:	6054      	str	r4, [r2, #4]
 8003756:	e7c9      	b.n	80036ec <_free_r+0x24>
 8003758:	bd38      	pop	{r3, r4, r5, pc}
 800375a:	bf00      	nop
 800375c:	20000120 	.word	0x20000120

08003760 <_malloc_r>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	1ccd      	adds	r5, r1, #3
 8003764:	f025 0503 	bic.w	r5, r5, #3
 8003768:	3508      	adds	r5, #8
 800376a:	2d0c      	cmp	r5, #12
 800376c:	bf38      	it	cc
 800376e:	250c      	movcc	r5, #12
 8003770:	2d00      	cmp	r5, #0
 8003772:	4606      	mov	r6, r0
 8003774:	db01      	blt.n	800377a <_malloc_r+0x1a>
 8003776:	42a9      	cmp	r1, r5
 8003778:	d903      	bls.n	8003782 <_malloc_r+0x22>
 800377a:	230c      	movs	r3, #12
 800377c:	6033      	str	r3, [r6, #0]
 800377e:	2000      	movs	r0, #0
 8003780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003782:	f000 f857 	bl	8003834 <__malloc_lock>
 8003786:	4921      	ldr	r1, [pc, #132]	; (800380c <_malloc_r+0xac>)
 8003788:	680a      	ldr	r2, [r1, #0]
 800378a:	4614      	mov	r4, r2
 800378c:	b99c      	cbnz	r4, 80037b6 <_malloc_r+0x56>
 800378e:	4f20      	ldr	r7, [pc, #128]	; (8003810 <_malloc_r+0xb0>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	b923      	cbnz	r3, 800379e <_malloc_r+0x3e>
 8003794:	4621      	mov	r1, r4
 8003796:	4630      	mov	r0, r6
 8003798:	f000 f83c 	bl	8003814 <_sbrk_r>
 800379c:	6038      	str	r0, [r7, #0]
 800379e:	4629      	mov	r1, r5
 80037a0:	4630      	mov	r0, r6
 80037a2:	f000 f837 	bl	8003814 <_sbrk_r>
 80037a6:	1c43      	adds	r3, r0, #1
 80037a8:	d123      	bne.n	80037f2 <_malloc_r+0x92>
 80037aa:	230c      	movs	r3, #12
 80037ac:	4630      	mov	r0, r6
 80037ae:	6033      	str	r3, [r6, #0]
 80037b0:	f000 f846 	bl	8003840 <__malloc_unlock>
 80037b4:	e7e3      	b.n	800377e <_malloc_r+0x1e>
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	1b5b      	subs	r3, r3, r5
 80037ba:	d417      	bmi.n	80037ec <_malloc_r+0x8c>
 80037bc:	2b0b      	cmp	r3, #11
 80037be:	d903      	bls.n	80037c8 <_malloc_r+0x68>
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	441c      	add	r4, r3
 80037c4:	6025      	str	r5, [r4, #0]
 80037c6:	e004      	b.n	80037d2 <_malloc_r+0x72>
 80037c8:	6863      	ldr	r3, [r4, #4]
 80037ca:	42a2      	cmp	r2, r4
 80037cc:	bf0c      	ite	eq
 80037ce:	600b      	streq	r3, [r1, #0]
 80037d0:	6053      	strne	r3, [r2, #4]
 80037d2:	4630      	mov	r0, r6
 80037d4:	f000 f834 	bl	8003840 <__malloc_unlock>
 80037d8:	f104 000b 	add.w	r0, r4, #11
 80037dc:	1d23      	adds	r3, r4, #4
 80037de:	f020 0007 	bic.w	r0, r0, #7
 80037e2:	1ac2      	subs	r2, r0, r3
 80037e4:	d0cc      	beq.n	8003780 <_malloc_r+0x20>
 80037e6:	1a1b      	subs	r3, r3, r0
 80037e8:	50a3      	str	r3, [r4, r2]
 80037ea:	e7c9      	b.n	8003780 <_malloc_r+0x20>
 80037ec:	4622      	mov	r2, r4
 80037ee:	6864      	ldr	r4, [r4, #4]
 80037f0:	e7cc      	b.n	800378c <_malloc_r+0x2c>
 80037f2:	1cc4      	adds	r4, r0, #3
 80037f4:	f024 0403 	bic.w	r4, r4, #3
 80037f8:	42a0      	cmp	r0, r4
 80037fa:	d0e3      	beq.n	80037c4 <_malloc_r+0x64>
 80037fc:	1a21      	subs	r1, r4, r0
 80037fe:	4630      	mov	r0, r6
 8003800:	f000 f808 	bl	8003814 <_sbrk_r>
 8003804:	3001      	adds	r0, #1
 8003806:	d1dd      	bne.n	80037c4 <_malloc_r+0x64>
 8003808:	e7cf      	b.n	80037aa <_malloc_r+0x4a>
 800380a:	bf00      	nop
 800380c:	20000120 	.word	0x20000120
 8003810:	20000124 	.word	0x20000124

08003814 <_sbrk_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	2300      	movs	r3, #0
 8003818:	4d05      	ldr	r5, [pc, #20]	; (8003830 <_sbrk_r+0x1c>)
 800381a:	4604      	mov	r4, r0
 800381c:	4608      	mov	r0, r1
 800381e:	602b      	str	r3, [r5, #0]
 8003820:	f7fd ff96 	bl	8001750 <_sbrk>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	d102      	bne.n	800382e <_sbrk_r+0x1a>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	b103      	cbz	r3, 800382e <_sbrk_r+0x1a>
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	20000174 	.word	0x20000174

08003834 <__malloc_lock>:
 8003834:	4801      	ldr	r0, [pc, #4]	; (800383c <__malloc_lock+0x8>)
 8003836:	f000 b809 	b.w	800384c <__retarget_lock_acquire_recursive>
 800383a:	bf00      	nop
 800383c:	2000017c 	.word	0x2000017c

08003840 <__malloc_unlock>:
 8003840:	4801      	ldr	r0, [pc, #4]	; (8003848 <__malloc_unlock+0x8>)
 8003842:	f000 b804 	b.w	800384e <__retarget_lock_release_recursive>
 8003846:	bf00      	nop
 8003848:	2000017c 	.word	0x2000017c

0800384c <__retarget_lock_acquire_recursive>:
 800384c:	4770      	bx	lr

0800384e <__retarget_lock_release_recursive>:
 800384e:	4770      	bx	lr

08003850 <_init>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr

0800385c <_fini>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	bf00      	nop
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr
